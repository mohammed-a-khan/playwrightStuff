package com.cssmart.ui.recorder;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.safari.SafariDriver;
import io.github.bonigarcia.wdm.WebDriverManager;
import com.cssmart.ui.recorder.model.RecordedStep;
import com.cssmart.ui.recorder.model.TestCase;
import lombok.extern.slf4j.Slf4j;
import java.util.List;
import java.util.ArrayList;
import java.util.UUID;
import java.time.LocalDateTime;
import java.net.URL;

@Slf4j
public class TestRecorder {
    private boolean isRecording;
    private List<RecordedStep> steps;
    private LocalDateTime startTime;
    private String sessionId;
    private WebDriver driver;
    private final String recorderApiUrl;
    private String currentDomain;
    
    /**
     * Constructor for TestRecorder
     * @param recorderApiUrl Base URL for recorder API (e.g., "http://localhost:8080")
     */
    public TestRecorder(String recorderApiUrl) {
        this.isRecording = false;
        this.steps = new ArrayList<>();
        this.recorderApiUrl = recorderApiUrl;
    }
    
    /**
     * Start recording a test
     * @param browserType Type of browser to use (chrome, firefox, edge, safari)
     * @param url Initial URL to navigate to
     */
    public void startRecording(String browserType, String url) {
        this.isRecording = true;
        this.steps.clear();
        this.startTime = LocalDateTime.now();
        this.sessionId = UUID.randomUUID().toString();
        
        // Initialize and launch browser
        initializeBrowser(browserType);
        
        // Navigate to the base URL
        if (driver != null && url != null && !url.isEmpty()) {
            try {
                // Extract domain for domain change detection
                URL parsedUrl = new URL(url);
                this.currentDomain = parsedUrl.getHost();
            } catch (Exception e) {
                log.warn("Could not parse URL domain: {}", e.getMessage());
                this.currentDomain = "";
            }
            
            // Navigate to the URL
            driver.get(url);
            
            // Inject the recorder script
            setupScriptInjection();
            
            // Add an automatic navigation step
            RecordedStep step = new RecordedStep();
            step.setAction("NAVIGATE");
            step.setValue(url);
            step.setTimestamp(LocalDateTime.now());
            step.setDescription("Navigate to " + url);
            steps.add(step);
        }
        
        log.info("Recording started with session ID: {}", sessionId);
    }
    
    /**
     * Initialize the browser for testing
     * @param browserType Type of browser to use
     */
    private void initializeBrowser(String browserType) {
        try {
            switch (browserType.toLowerCase()) {
                case "chrome":
                    WebDriverManager.chromedriver().setup();
                    
                    ChromeOptions chromeOptions = new ChromeOptions();
                    // Allow cross-origin requests
                    chromeOptions.addArguments("--disable-web-security");
                    chromeOptions.addArguments("--disable-notifications"); // Disable notifications
                    
                    driver = new ChromeDriver(chromeOptions);
                    break;
                case "firefox":
                    WebDriverManager.firefoxdriver().setup();
                    
                    FirefoxOptions firefoxOptions = new FirefoxOptions();
                    // Configure Firefox options if needed
                    driver = new FirefoxDriver(firefoxOptions);
                    break;
                case "edge":
                    WebDriverManager.edgedriver().setup();
                    
                    EdgeOptions edgeOptions = new EdgeOptions();
                    // Configure Edge options if needed
                    driver = new EdgeDriver(edgeOptions);
                    break;
                case "safari":
                    driver = new SafariDriver();
                    break;
                default:
                    log.warn("Unsupported browser type: {}. Defaulting to Chrome.", browserType);
                    WebDriverManager.chromedriver().setup();
                    driver = new ChromeDriver();
            }
            
            // Maximize browser window
            driver.manage().window().maximize();
            
            log.info("Browser initialized: {}", browserType);
            
            // Set up page load listening
            setupPageLoadListener();
            
        } catch (Exception e) {
            log.error("Failed to initialize browser: {}", e.getMessage(), e);
            throw new RuntimeException("Failed to initialize browser: " + e.getMessage(), e);
        }
    }
    
    /**
     * Set up a listener to detect page loads and domain changes
     */
    private void setupPageLoadListener() {
        if (driver instanceof JavascriptExecutor) {
            JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;
            
            // Set up a MutationObserver to detect URL changes for SPAs
            String urlChangeDetectionScript = 
                "var csLastUrl = location.href;\n" +
                "var csRecorderSessionId = '" + sessionId + "';\n" +
                "var csRecorderApiUrl = '" + recorderApiUrl + "/api/recorder/event';\n" +
                
                "function csCheckUrlChange() {\n" +
                "    if (csLastUrl !== location.href) {\n" +
                "        console.log('URL changed from ' + csLastUrl + ' to ' + location.href);\n" +
                "        csLastUrl = location.href;\n" +
                "        \n" +
                "        // Send navigation event\n" +
                "        csSendNavigationEvent(location.href);\n" +
                "        \n" +
                "        // Check if we need to re-inject recorder\n" +
                "        if (!window._csRecorderData || !window._csRecorderData.active) {\n" +
                "            console.log('Recorder not active after URL change, re-initializing');\n" +
                "            if (typeof initCSRecorder === 'function') {\n" +
                "                initCSRecorder();\n" +
                "            }\n" +
                "        }\n" +
                "    }\n" +
                "}\n" +
                
                "function csSendNavigationEvent(url) {\n" +
                "    var xhr = new XMLHttpRequest();\n" +
                "    xhr.open('POST', csRecorderApiUrl, true);\n" +
                "    xhr.setRequestHeader('Content-Type', 'application/json');\n" +
                "    xhr.send(JSON.stringify({\n" +
                "        sessionId: csRecorderSessionId,\n" +
                "        actionType: 'NAVIGATE',\n" +
                "        element: 'page',\n" +
                "        value: url\n" +
                "    }));\n" +
                "}\n" +
                
                "// Check URL change on regular interval for SPAs\n" +
                "setInterval(csCheckUrlChange, 500);\n" +
                
                "// Also listen for popstate events (browser back/forward buttons)\n" +
                "window.addEventListener('popstate', function() {\n" +
                "    setTimeout(function() {\n" +
                "        csCheckUrlChange();\n" +
                "    }, 100);\n" +
                "});\n";
            
            jsExecutor.executeScript(urlChangeDetectionScript);
            log.info("URL change detection script injected");
        }
    }
    
    /**
     * Inject recorder script to capture user interactions
     */
    public void setupScriptInjection() {
        if (driver instanceof JavascriptExecutor) {
            JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;
            
            // Check if recorder is already injected
            Boolean isInjected = false;
            try {
                isInjected = (Boolean) jsExecutor.executeScript(
                    "return typeof window._csRecorderData !== 'undefined' && window._csRecorderData.active === true;"
                );
            } catch (Exception e) {
                log.debug("Could not check recorder status: {}", e.getMessage());
            }
            
            if (Boolean.TRUE.equals(isInjected)) {
                log.info("Recorder script already active on this page");
                return;
            }
            
            // Check for domain change
            try {
                String url = driver.getCurrentUrl();
                URL parsedUrl = new URL(url);
                String newDomain = parsedUrl.getHost();
                
                if (!newDomain.equals(currentDomain)) {
                    log.info("Domain changed from {} to {}", currentDomain, newDomain);
                    currentDomain = newDomain;
                }
            } catch (Exception e) {
                log.warn("Could not detect domain change: {}", e.getMessage());
            }
            
            // This script adds methods to detect and handle all navigation types
            String script = 
                // Store recorder data in a global space
                "window._csRecorderData = {\n" +
                "    sessionId: '" + sessionId + "',\n" +
                "    apiUrl: '" + recorderApiUrl + "/api/recorder/event',\n" +
                "    active: true\n" +
                "};\n" +
                
                // Create an initialization function
                "function initCSRecorder() {\n" +
                "    console.log('Initializing CS Smart Recorder, sessionId: ' + window._csRecorderData.sessionId);\n" +
                "    \n" +
                "    // Setup click event recorder\n" +
                "    document.addEventListener('click', function(e) {\n" +
                "        var element = e.target;\n" +
                "        var selector = getElementSelector(element);\n" +
                "        recordEvent('CLICK', selector, '');\n" +
                "    }, true);\n" +
                "    \n" +
                "    // Input events\n" +
                "    document.addEventListener('change', function(e) {\n" +
                "        var element = e.target;\n" +
                "        var selector = getElementSelector(element);\n" +
                "        \n" +
                "        if (element.tagName.toLowerCase() === 'input' || \n" +
                "            element.tagName.toLowerCase() === 'textarea') {\n" +
                "            recordEvent('TYPE', selector, element.value);\n" +
                "        } else if (element.tagName.toLowerCase() === 'select') {\n" +
                "            recordEvent('SELECT', selector, element.value);\n" +
                "        }\n" +
                "    }, true);\n" +
                "    \n" +
                "    // Form submissions\n" +
                "    document.addEventListener('submit', function(e) {\n" +
                "        var form = e.target;\n" +
                "        var selector = getElementSelector(form);\n" +
                "        recordEvent('SUBMIT', selector, '');\n" +
                "    }, true);\n" +
                "    \n" +
                "    // Record page load\n" +
                "    recordEvent('NAVIGATE', 'page', window.location.href);\n" +
                "}\n" +
                
                // Helper functions
                "function getElementSelector(element) {\n" +
                "    if (!element) return 'unknown';\n" +
                "    \n" +
                "    if (element.id) return '#' + element.id;\n" +
                "    if (element.name) return '[name=\"' + element.name + '\"]';\n" +
                "    \n" +
                "    var selector = element.tagName.toLowerCase();\n" +
                "    \n" +
                "    if (typeof element.className === 'string') {\n" +
                "        var classes = element.className.trim().split(/\\s+/);\n" +
                "        for (var i = 0; i < classes.length; i++) {\n" +
                "            if (classes[i]) selector += '.' + classes[i];\n" +
                "        }\n" +
                "    } else if (element.classList && element.classList.length) {\n" +
                "        for (var i = 0; i < element.classList.length; i++) {\n" +
                "            selector += '.' + element.classList[i];\n" +
                "        }\n" +
                "    }\n" +
                "    \n" +
                "    return selector;\n" +
                "}\n" +
                
                "function recordEvent(type, element, value) {\n" +
                "    if (!window._csRecorderData || !window._csRecorderData.active) return;\n" +
                "    \n" +
                "    console.log('Recording: ' + type + ' on ' + element);\n" +
                "    \n" +
                "    var xhr = new XMLHttpRequest();\n" +
                "    xhr.open('POST', window._csRecorderData.apiUrl, true);\n" +
                "    xhr.setRequestHeader('Content-Type', 'application/json');\n" +
                "    \n" +
                "    xhr.send(JSON.stringify({\n" +
                "        sessionId: window._csRecorderData.sessionId,\n" +
                "        actionType: type,\n" +
                "        element: element,\n" +
                "        value: value || ''\n" +
                "    }));\n" +
                "}\n" +
                
                // Initialize immediately
                "initCSRecorder();\n" +
                
                // Also add to page load and beforeunload events
                "window.addEventListener('load', function() {\n" +
                "    setTimeout(initCSRecorder, 500);\n" +
                "});\n" +
                
                // Before page unload, record navigation intent
                "window.addEventListener('beforeunload', function() {\n" +
                "    // This will run before navigation/reload\n" +
                "    recordEvent('NAVIGATE_INTENT', 'page', '');\n" +
                "});\n";
            
            // Inject script directly
            jsExecutor.executeScript(script);
            
            // Also modify XHR to detect AJAX-based navigations
            jsExecutor.executeScript(
                "if (typeof window.originalXHROpen === 'undefined') {\n" +
                "    window.originalXHROpen = XMLHttpRequest.prototype.open;\n" +
                "    XMLHttpRequest.prototype.open = function() {\n" +
                "        var url = arguments[1];\n" +
                "        this.addEventListener('load', function() {\n" +
                "            // Check if this XHR might be a page navigation\n" +
                "            if (this.responseType === 'document' || \n" +
                "                (this.getResponseHeader('Content-Type') && \n" +
                "                 this.getResponseHeader('Content-Type').indexOf('html') !== -1)) {\n" +
                "                console.log('Potential AJAX navigation detected to: ' + url);\n" +
                "                recordEvent('XHR_NAVIGATE', 'xhr', url);\n" +
                "            }\n" +
                "        });\n" +
                "        return window.originalXHROpen.apply(this, arguments);\n" +
                "    };\n" +
                "}\n"
            );
            
            // Override form submission to detect traditional form-based navigation
            jsExecutor.executeScript(
                "if (typeof window.HTMLFormElement.prototype.originalSubmit === 'undefined') {\n" +
                "    window.HTMLFormElement.prototype.originalSubmit = HTMLFormElement.prototype.submit;\n" +
                "    HTMLFormElement.prototype.submit = function() {\n" +
                "        var form = this;\n" +
                "        var action = form.action || window.location.href;\n" +
                "        var selector = getElementSelector(form);\n" +
                "        \n" +
                "        console.log('Form submission detected to: ' + action);\n" +
                "        recordEvent('FORM_SUBMIT', selector, action);\n" +
                "        \n" +
                "        return this.originalSubmit();\n" +
                "    };\n" +
                "}\n"
            );
            
            log.info("Recorder script injected successfully");
        }
    }
    
    /**
     * Check for domain change and reinject recorder if needed
     */
    public void checkForDomainChange() {
        if (driver == null) return;
        
        try {
            String url = driver.getCurrentUrl();
            URL parsedUrl = new URL(url);
            String newDomain = parsedUrl.getHost();
            
            if (!newDomain.equals(currentDomain)) {
                log.info("Domain changed from {} to {}, reinjecting recorder", currentDomain, newDomain);
                currentDomain = newDomain;
                setupScriptInjection();
            }
        } catch (Exception e) {
            log.warn("Could not check for domain change: {}", e.getMessage());
        }
    }
    
    /**
     * Stop recording and return the recorded test case
     * @return Recorded test case
     */
    public TestCase stopRecording() {
        this.isRecording = false;
        LocalDateTime endTime = LocalDateTime.now();
        log.info("Recording stopped, captured {} steps", steps.size());
        
        // Close the browser
        if (driver != null) {
            try {
                driver.quit();
                log.info("Browser closed");
            } catch (Exception e) {
                log.error("Error closing browser: {}", e.getMessage(), e);
            } finally {
                driver = null;
            }
        }
        
        // Create test case from recorded steps
        TestCase testCase = createTestCase(steps, startTime, endTime);
        
        // Clear steps
        this.steps.clear();
        
        return testCase;
    }
    
    /**
     * Record an action performed during testing
     * @param actionType Type of action (CLICK, TYPE, etc.)
     * @param element Element selector or identifier
     * @param value Value for the action (if applicable)
     */
    public void recordAction(String actionType, String element, String value) {
        if (!isRecording) {
            log.warn("Attempted to record action when not recording");
            return;
        }
        
        // Check if this is a navigation action and we should check for domain change
        if ("NAVIGATE".equals(actionType) || "XHR_NAVIGATE".equals(actionType) || 
            "FORM_SUBMIT".equals(actionType) || "NAVIGATE_INTENT".equals(actionType)) {
            // Schedule a domain check after a short delay to allow navigation to complete
            new Thread(() -> {
                try {
                    Thread.sleep(1000);
                    checkForDomainChange();
                } catch (Exception e) {
                    log.warn("Error in domain change check: {}", e.getMessage());
                }
            }).start();
        }
        
        RecordedStep step = new RecordedStep();
        step.setAction(actionType);
        step.setElement(element);
        step.setValue(value);
        step.setTimestamp(LocalDateTime.now());
        
        // Generate description
        step.setDescription(generateActionDescription(actionType, element, value));
        
        steps.add(step);
        log.debug("Recorded step: {}", step);
    }
    
    /**
     * Generate a human-readable description for an action
     * @param actionType Type of action
     * @param element Element selector
     * @param value Action value (if applicable)
     * @return Human-readable description
     */
    private String generateActionDescription(String actionType, String element, String value) {
        switch (actionType) {
            case "CLICK":
                return "Click on " + element;
            case "TYPE":
                return "Enter '" + value + "' in " + element;
            case "SELECT":
                return "Select '" + value + "' from " + element;
            case "VERIFY_PRESENCE":
                return "Verify " + element + " is present";
            case "VERIFY_VISIBILITY":
                return "Verify " + element + " is visible";
            case "VERIFY_STATE":
                return "Verify " + element + " state is '" + value + "'";
            case "WAIT":
                return "Wait for " + element;
            case "HOVER":
                return "Hover over " + element;
            case "NAVIGATE":
                return "Navigate to " + value;
            case "NAVIGATE_INTENT":
                return "Navigating away from page";
            case "XHR_NAVIGATE":
                return "AJAX navigation to " + value;
            case "FORM_SUBMIT":
                return "Submit form " + element + " to " + value;
            case "SUBMIT":
                return "Submit form " + element;
            default:
                return actionType + " on " + element;
        }
    }
    
    /**
     * Create a test case from recorded steps
     * @param steps Recorded steps
     * @param startTime Recording start time
     * @param endTime Recording end time
     * @return TestCase object
     */
    private TestCase createTestCase(List<RecordedStep> steps, LocalDateTime startTime, LocalDateTime endTime) {
        TestCase testCase = new TestCase();
        testCase.setId(sessionId);
        testCase.setName("Recorded Test " + startTime.toString());
        testCase.setDescription("Automatically recorded test case");
        testCase.setSteps(new ArrayList<>(steps));
        testCase.setStartTime(startTime);
        testCase.setEndTime(endTime);
        
        // Generate class and method names
        String timestamp = startTime.toString().replaceAll("[^a-zA-Z0-9]", "");
        testCase.setClassName("RecordedTest" + timestamp);
        testCase.setMethodName("test" + timestamp);
        
        // Generate test code
        testCase.setCode(generateTestCode(testCase));
        
        return testCase;
    }
    
    /**
     * Generate Java test code from the test case
     * @param testCase Test case
     * @return Java code as string
     */
    private String generateTestCode(TestCase testCase) {
        StringBuilder code = new StringBuilder();
        
        // Add imports and class declaration
        code.append("package com.cssmart.tests.generated;\n\n");
        code.append("import com.cssmart.core.base.CSSmartTestBase;\n");
        code.append("import com.cssmart.core.annotations.CSSmartTest;\n");
        code.append("import org.testng.annotations.Test;\n");
        code.append("import org.openqa.selenium.WebElement;\n");
        code.append("import org.testng.Assert;\n");
        code.append("import lombok.extern.slf4j.Slf4j;\n\n");
        
        code.append("/**\n");
        code.append(" * ").append(testCase.getDescription()).append("\n");
        code.append(" * Recorded on: ").append(testCase.getStartTime()).append("\n");
        code.append(" */\n");
        code.append("@Slf4j\n");
        code.append("public class ").append(testCase.getClassName()).append(" extends CSSmartTestBase {\n\n");
        
        // Add test method
        code.append("    @Test\n");
        code.append("    @CSSmartTest(description = \"").append(testCase.getDescription()).append("\")\n");
        code.append("    public void ").append(testCase.getMethodName()).append("() {\n");
        code.append("        log.info(\"Starting test: ").append(testCase.getDescription()).append("\");\n\n");
        
        // Add test steps
        for (RecordedStep step : testCase.getSteps()) {
            code.append("        // ").append(step.getDescription()).append("\n");
            
            if ("NAVIGATE".equals(step.getAction())) {
                code.append("        driver.get(\"").append(step.getValue()).append("\");\n");
            } else if ("CLICK".equals(step.getAction())) {
                code.append("        WebElement element = elementFinder.findElement(\"")
                    .append(step.getElement()).append("\");\n");
                code.append("        element.click();\n");
            } else if ("TYPE".equals(step.getAction())) {
                code.append("        WebElement element = elementFinder.findElement(\"")
                    .append(step.getElement()).append("\");\n");
                code.append("        element.clear();\n");
                code.append("        element.sendKeys(\"").append(step.getValue()).append("\");\n");
            } else if ("SELECT".equals(step.getAction())) {
                code.append("        WebElement element = elementFinder.findElement(\"")
                    .append(step.getElement()).append("\");\n");
                code.append("        new org.openqa.selenium.support.ui.Select(element)")
                    .append(".selectByVisibleText(\"").append(step.getValue()).append("\");\n");
            } else if ("VERIFY_PRESENCE".equals(step.getAction())) {
                code.append("        WebElement element = elementFinder.findElement(\"")
                    .append(step.getElement()).append("\");\n");
                code.append("        Assert.assertTrue(element.isDisplayed(), \"")
                    .append(step.getElement()).append(" should be present\");\n");
            } else if ("SUBMIT".equals(step.getAction()) || "FORM_SUBMIT".equals(step.getAction())) {
                code.append("        WebElement element = elementFinder.findElement(\"")
                    .append(step.getElement()).append("\");\n");
                code.append("        element.submit();\n");
            }
            // Skip internal navigation tracking events that don't require test code
            else if ("NAVIGATE_INTENT".equals(step.getAction()) || 
                    "XHR_NAVIGATE".equals(step.getAction())) {
                code.append("        // Internal navigation event - no code needed\n");
            }
            
            code.append("\n");
        }
        
        code.append("        log.info(\"Test completed successfully\");\n");
        code.append("    }\n");
        code.append("}\n");
        
        return code.toString();
    }
    
    /**
     * Check if recording is in progress
     * @return True if recording, false otherwise
     */
    public boolean isRecording() {
        return isRecording;
    }
    
    /**
     * Get the current list of recorded steps
     * @return List of recorded steps (copy)
     */
    public List<RecordedStep> getSteps() {
        return new ArrayList<>(steps);  // Return a copy to prevent modification
    }
    
    /**
     * Get the last recorded step
     * @return Last recorded step or null if none
     */
    public RecordedStep getLastRecordedStep() {
        if (steps.isEmpty()) {
            return null;
        }
        return steps.get(steps.size() - 1);
    }
    
    /**
     * Get the WebDriver instance
     * @return Current WebDriver instance
     */
    public WebDriver getDriver() {
        return driver;
    }
    
    /**
     * Get the session ID for this recording
     * @return Recording session ID
     */
    public String getSessionId() {
        return sessionId;
    }
}
