const fs = require('fs');
const path = require('path');

// Very simple converter that focuses only on @FindBy patterns
function convertFile(inputFile, outputFile) {
  console.log(`Converting ${inputFile} to ${outputFile}`);
  
  try {
    // Read the file
    let content = fs.readFileSync(inputFile, 'utf8');
    
    // Pattern 1: JSON format with locator and desc
    content = content.replace(
      /@FindBy\(locator\s*=\s*"\{\\"locator\\":\\"xpath=([^"]+)\\",\\"desc\\":\\"[^"]*\\"\}"\)\s*public\s+CSWebElement\s+(\w+);/g,
      (match, xpathValue, elementName) => {
        return `private readonly ${elementName} = \`${xpathValue}\`;`;
      }
    );
    
    // Pattern 2: Direct xpath format
    content = content.replace(
      /@FindBy\(locator\s*=\s*"xpath=([^"]+)"\)\s*public\s+CSWebElement\s+(\w+);/g,
      (match, xpathValue, elementName) => {
        return `private readonly ${elementName} = \`${xpathValue}\`;`;
      }
    );
    
    // Method pattern
    content = content.replace(
      /public\s+CSWebElement\s+(\w+)\(String\s+(\w+)\)\s*\{\s*return\s+new\s+CSWebElement\(\s*"\{\\"locator\\":\\"xpath=([^']+)'"\s*\+\s*(\w+)\s*\+\s*"'([^"]+)\\",\\"desc\\":\\"[^"]*\\"\}"\);\s*\}/g,
      (match, methodName, paramName, prefix, param, suffix) => {
        return `private ${methodName} = (${paramName}) => \`${prefix}\${${paramName}}${suffix}\`;`;
      }
    );
    
    // Write the output file
    const outputDir = path.dirname(outputFile);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    fs.writeFileSync(outputFile, content);
    console.log(`Conversion completed: ${outputFile}`);
    
  } catch (error) {
    console.error(`Error converting file: ${error.message}`);
  }
}

// Process a directory
function processDirectory(inputDir, outputDir) {
  const files = getJavaFiles(inputDir);
  
  files.forEach(file => {
    const relativePath = path.relative(inputDir, file);
    const outputFile = path.join(outputDir, relativePath.replace('.java', '.ts'));
    convertFile(file, outputFile);
  });
}

// Get all Java files in a directory and its subdirectories
function getJavaFiles(dir) {
  const files = [];
  
  const items = fs.readdirSync(dir);
  
  items.forEach(item => {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory()) {
      files.push(...getJavaFiles(fullPath));
    } else if (item.endsWith('.java')) {
      files.push(fullPath);
    }
  });
  
  return files;
}

// Get command line arguments
const inputDir = process.argv[2];
const outputDir = process.argv[3];

if (!inputDir || !outputDir) {
  console.error('Usage: node findby-converter.js <input-directory> <output-directory>');
  process.exit(1);
}

// Run the conversion
console.log(`Converting files from ${inputDir} to ${outputDir}`);
processDirectory(inputDir, outputDir);
