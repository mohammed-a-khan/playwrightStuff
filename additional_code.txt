function extractDynamicLocator(constructorArgs: string, methodBody: string, paramsList: MethodParam[]): string {
  // Step 1: Extract the XPath string from the constructor args
  const xpathStartIndex = constructorArgs.indexOf('xpath=');
  if (xpathStartIndex === -1) {
    return `//TODO-${paramsList.map(p => p.name).join('-')}`;
  }
  
  // Find the end of the XPath (usually at a quote before the desc field)
  let endIndex = constructorArgs.indexOf('","', xpathStartIndex);
  if (endIndex === -1) {
    endIndex = constructorArgs.indexOf('"', xpathStartIndex + 7); // Skip the opening quote after xpath=
  }
  
  if (endIndex === -1) {
    return `//TODO-${paramsList.map(p => p.name).join('-')}`;
  }
  
  // Step 2: Extract the XPath string with Java concatenation
  const xpathString = constructorArgs.substring(xpathStartIndex + 6, endIndex);
  
  // Step 3: Simple direct replacement of parameter patterns with template literals
  let finalXPath = xpathString;
  
  // Process each parameter in the list
  for (const param of paramsList) {
    // Look for the Java string concatenation pattern: "+paramName+"
    const paramPattern = `"+${param.name}+"`;
    
    // Replace all occurrences with template literal
    while (finalXPath.includes(paramPattern)) {
      finalXPath = finalXPath.replace(paramPattern, `\${${param.name}}`);
    }
  }
  
  // Step 4: Clean up escaped characters that are no longer needed in TypeScript
  finalXPath = finalXPath.replace(/\\"/g, '"')   // Replace \" with "
                         .replace(/\\'/g, "'")   // Replace \' with '
                         .replace(/\\\\/g, '\\'); // Replace \\ with \
  
  return finalXPath;
}
