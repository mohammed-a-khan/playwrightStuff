#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Global debug flag
let DEBUG = false;

/**
 * Debug logging function
 */
function debugLog(...args: any[]): void {
  if (DEBUG) {
    console.log('[DEBUG]', ...args);
  }
}

/**
 * QAF BDD Selenium Java to Playwright TypeScript Converter
 * Processes a single file
 */
function convertFile(inputFile: string, outputFile: string): void {
  try {
    console.log(`Reading ${inputFile}...`);
    if (!fs.existsSync(inputFile)) {
      console.error(`Error: Input file ${inputFile} does not exist`);
      process.exit(1);
    }
    
    const content = fs.readFileSync(inputFile, 'utf8');
    
    // Extract class and package information
    const packageInfo = extractPackageInfo(content);
    const className = extractClassName(content) || path.basename(inputFile, '.java');
    
    // Process elements by type
    const standardElements = extractAndConvertElements(content, 'CSWebElement');
    const dropdownElements = extractAndConvertElements(content, 'CSDropDownListWebElement');
    
    // Process dynamic locator methods by return type
    const standardMethods = extractAndConvertMethods(content, 'CSWebElement');
    const dropdownMethods = extractAndConvertMethods(content, 'CSDropDownListWebElement');
    
    // Generate the final TypeScript output
    const finalOutput = generateTypeScriptOutput(
      className, 
      packageInfo,
      standardElements, 
      dropdownElements,
      standardMethods, 
      dropdownMethods
    );
    
    // Write the result
    const outputDir = path.dirname(outputFile);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    fs.writeFileSync(outputFile, finalOutput);
    console.log(`Converted file successfully written to ${outputFile}`);
  } catch (error) {
    console.error(`Error converting file: ${error instanceof Error ? error.message : String(error)}`);
    if (error instanceof Error && error.stack) {
      console.error(error.stack);
    }
  }
}

/**
 * Recursively process all Java files in a directory
 */
function processDirectory(inputDir: string, outputDir: string): void {
  console.log(`Processing directory: ${inputDir}`);
  
  // Read all items in the directory
  const items = fs.readdirSync(inputDir);
  
  // Process each item
  for (const item of items) {
    const inputPath = path.join(inputDir, item);
    const stat = fs.statSync(inputPath);
    
    if (stat.isDirectory()) {
      // Create corresponding output directory if it doesn't exist
      const nestedOutputDir = path.join(outputDir, item);
      
      // Recursively process subdirectory
      processDirectory(inputPath, nestedOutputDir);
    } else if (item.endsWith('.java')) {
      // Process Java file
      const baseName = path.basename(item, '.java');
      const outputFile = path.join(outputDir, `${baseName}.ts`);
      
      console.log(`Processing ${inputPath} -> ${outputFile}`);
      convertFile(inputPath, outputFile);
    }
  }
}

/**
 * Extract the package name from Java content
 */
function extractPackageInfo(content: string): string | null {
  const packageMatch = content.match(/package\s+([\w.]+)\s*;/);
  return packageMatch ? packageMatch[1] : null;
}

/**
 * Extract the class name from Java content
 */
function extractClassName(content: string): string | null {
  const classMatch = content.match(/public\s+class\s+(\w+)/);
  return classMatch ? classMatch[1] : null;
}

interface ElementInfo {
  name: string;
  originalName: string;
  locator: string;
  type: string;
}

/**
 * Extract and convert elements of a specific type from Java to Playwright format
 */
function extractAndConvertElements(content: string, elementType: string): ElementInfo[] {
  const elementsList: ElementInfo[] = [];
  
  // FindBy pattern for both CSWebElement and CSDropDownListWebElement
  const findByRegex = new RegExp(
    `@FindBy\\(locator\\s*=\\s*"(.*?)"\\)\\s*(?:public|private|protected)?\\s*${elementType}\\s+(\\w+)\\s*;`, 
    'gs'
  );
  
  // Process elements
  let match: RegExpExecArray | null;
  while ((match = findByRegex.exec(content)) !== null) {
    const locatorStr = match[1];
    const elementName = match[2];
    
    const locatorValue = extractLocatorValue(locatorStr);
    
    elementsList.push({
      name: elementName.charAt(0).toLowerCase() + elementName.slice(1),
      originalName: elementName,
      locator: locatorValue,
      type: elementType
    });
  }
  
  return elementsList;
}

/**
 * Extract locator value from various formats
 */
function extractLocatorValue(locatorStr: string): string {
  // Check for both escaped and unescaped versions of "locator"
  const hasEscapedLocator = locatorStr.includes('\\"locator\\"');
  const hasUnescapedLocator = locatorStr.includes('"locator"');
  
  // Handle JSON format with {"locator":"xpath=..."}
  if (hasEscapedLocator || hasUnescapedLocator) {
    try {
      // Extract the locator value directly using regex - most reliable method
      // Patterns for both escaped and unescaped formats
      const escapedXpathPattern = /\\"locator\\"\\s*:\\s*\\"xpath=([^"]+)\\"/;
      const escapedPathPattern = /\\"locator\\"\\s*:\\s*\\"path=([^"]+)\\"/;
      const unescapedXpathPattern = /"locator"\s*:\s*"xpath=([^"]+)"/;
      const unescapedPathPattern = /"locator"\s*:\s*"path=([^"]+)"/;
      
      // Try each pattern
      let match = null;
      
      // Check escaped xpath format
      match = locatorStr.match(escapedXpathPattern);
      if (match && match[1]) {
        return match[1];
      }
      
      // Check escaped path format
      match = locatorStr.match(escapedPathPattern);
      if (match && match[1]) {
        return match[1];
      }
      
      // Check unescaped xpath format
      match = locatorStr.match(unescapedXpathPattern);
      if (match && match[1]) {
        return match[1];
      }
      
      // Check unescaped path format
      match = locatorStr.match(unescapedPathPattern);
      if (match && match[1]) {
        return match[1];
      }
    } catch (e) {
      // Fall through to other patterns if JSON parsing fails
    }
  } else if (locatorStr.startsWith('xpath=')) {
    // Direct xpath format
    return locatorStr.substring(6);
  } else if (locatorStr.startsWith('path=')) {
    // Direct path format
    return locatorStr.substring(5);
  }
  
  // For simple direct locators without prefix
  const directXpathMatch = locatorStr.match(/^\/\/.+/);
  if (directXpathMatch) {
    return locatorStr;
  }
  
  // Default - just return as is
  return locatorStr;
}

interface MethodParam {
  type: string;
  name: string;
}

interface MethodInfo {
  name: string;
  params: MethodParam[];
  locator: string;
  type: string;
}

/**
 * Extract and convert all dynamic locator methods for a specific return type
 */
function extractAndConvertMethods(content: string, returnType: string): MethodInfo[] {
  const methodsList: MethodInfo[] = [];
  
  // Find all methods that return the specified element type
  const methodRegex = new RegExp(
    `(?:public|private|protected)\\s+${returnType}\\s+(\\w+)\\s*\\(([^)]*)\\)\\s*\\{([\\s\\S]*?)return\\s+new\\s+${returnType}\\s*\\(([\\s\\S]*?)\\)\\s*;\\s*\\}`, 
    'gs'
  );
  
  let methodMatch: RegExpExecArray | null;
  while ((methodMatch = methodRegex.exec(content)) !== null) {
    try {
      const methodName = methodMatch[1];
      const params = methodMatch[2] || '';
      const methodBody = methodMatch[3] || '';
      const constructorArgs = methodMatch[4] || '';
      
      // Extract parameter information
      const paramsList = params.split(',').map(param => {
        const parts = param.trim().split(/\s+/);
        // Handle syntax errors in the Java code
        if (parts.length < 2) return null;
        
        // Fix common typos in the Java code
        let paramType = parts[0].replace(/Sring/, 'String');
        let paramName = parts[1].replace(/["']/g, ''); // Remove any quotes
        
        return { type: paramType, name: paramName };
      }).filter((param): param is MethodParam => param !== null);
      
      // Try to extract locator pattern
      const locator = extractDynamicLocator(constructorArgs, methodBody, paramsList);
      
      // Create the converted method
      methodsList.push({
        name: methodName,
        params: paramsList,
        locator: locator,
        type: returnType
      });
    } catch (error) {
      // Skip this method if we can't process it
    }
  }
  
  return methodsList;
}

/**
 * Extract dynamic locator from method body and constructor args
 */
function extractDynamicLocator(constructorArgs: string, methodBody: string, paramsList: MethodParam[]): string {
  // Check for escaped and unescaped patterns
  const hasEscapedLocator = constructorArgs.includes('\\"locator\\"');
  const hasUnescapedLocator = constructorArgs.includes('"locator"');
  
  if (hasEscapedLocator || hasUnescapedLocator) {
    try {
      // Simple concatenation pattern
      const simplePattern = /"([^"]*?)"\s*\+\s*(\w+)\s*\+\s*"([^"]*?)"/;
      const match = constructorArgs.match(simplePattern);
      
      if (match) {
        const prefix = match[1] || '';
        const variable = match[2] || '';
        const suffix = match[3] || '';
        
        // Check if this variable is a parameter
        const isParam = paramsList.some(p => p.name === variable);
        
        if (isParam) {
          return `${prefix}\${${variable}}${suffix}`;
        }
      }
      
      // Try to extract from getters or method calls
      const methodCallPattern = /(\w+)\(([^)]*)\)/;
      const methodMatch = constructorArgs.match(methodCallPattern);
      
      if (methodMatch) {
        const methodName = methodMatch[1];
        const methodParams = methodMatch[2];
        
        // Simple implementation for method calls
        return `\${${methodParams}}`;
      }
    } catch (error) {
      // Fall through to default
    }
  }
  
  // Default placeholder
  return `//TODO-Convert-Locator-For-${paramsList.map(p => p.name).join('-')}`;
}

/**
 * Generate the final TypeScript output
 */
function generateTypeScriptOutput(
  className: string, 
  packageInfo: string | null,
  standardElements: ElementInfo[], 
  dropdownElements: ElementInfo[],
  standardMethods: MethodInfo[], 
  dropdownMethods: MethodInfo[]
): string {
  // Build imports
  let output = `// Converted from ${packageInfo ? packageInfo + '.' : ''}${className}\n`;
  output += `import { Page, Locator } from '@playwright/test';\n\n`;
  
  // Add helper interface for dropdown interaction
  output += `// Helper interface for dropdown functionality\n`;
  output += `interface DropdownOptions {\n`;
  output += `  selectByText: (text: string) => Promise<void>;\n`;
  output += `  selectByValue: (value: string) => Promise<void>;\n`;
  output += `  selectByIndex: (index: number) => Promise<void>;\n`;
  output += `  getOptions: () => Promise<string[]>;\n`;
  output += `}\n\n`;
  
  // Start class definition
  output += `export class ${className} {\n`;
  output += `  constructor(private page: Page) {}\n\n`;
  
  // Add standard element locators
  if (standardElements.length > 0) {
    output += `  // Standard Element Locators\n`;
    standardElements.forEach(element => {
      output += `  private readonly ${element.name} = \`${element.locator}\`;\n`;
    });
    output += `\n`;
  }
  
  // Add dropdown element locators
  if (dropdownElements.length > 0) {
    output += `  // Dropdown Element Locators\n`;
    dropdownElements.forEach(element => {
      output += `  private readonly ${element.name} = \`${element.locator}\`;\n`;
    });
    output += `\n`;
  }
  
  // Add standard dynamic locator methods
  if (standardMethods.length > 0) {
    output += `  // Dynamic Standard Locators\n`;
    standardMethods.forEach(method => {
      const paramList = method.params.map(p => `${p.name}: ${mapJavaTypeToTypeScript(p.type)}`).join(', ');
      output += `  private readonly ${method.name} = (${paramList}): string => \`${method.locator}\`;\n`;
    });
    output += `\n`;
  }
  
  // Add dropdown dynamic locator methods
  if (dropdownMethods.length > 0) {
    output += `  // Dynamic Dropdown Locators\n`;
    dropdownMethods.forEach(method => {
      const paramList = method.params.map(p => `${p.name}: ${mapJavaTypeToTypeScript(p.type)}`).join(', ');
      output += `  private readonly ${method.name} = (${paramList}): string => \`${method.locator}\`;\n`;
    });
    output += `\n`;
  }
  
  // Add getters for standard elements
  if (standardElements.length > 0) {
    output += `  // Standard Element Getters\n`;
    standardElements.forEach(element => {
      const capitalizedName = element.originalName;
      output += `  get ${capitalizedName}(): Locator {\n`;
      output += `    return this.page.locator(this.${element.name});\n`;
      output += `  }\n\n`;
    });
  }
  
  // Add getters for dropdown elements
  if (dropdownElements.length > 0) {
    output += `  // Dropdown Element Getters with enhanced functionality\n`;
    dropdownElements.forEach(element => {
      const capitalizedName = element.originalName;
      output += `  get ${capitalizedName}(): Locator & DropdownOptions {\n`;
      output += `    const baseLocator = this.page.locator(this.${element.name});\n`;
      output += `    \n`;
      output += `    // Add dropdown specific functionality\n`;
      output += `    const dropdown = baseLocator as Locator & DropdownOptions;\n`;
      output += `    \n`;
      output += `    dropdown.selectByText = async (text: string): Promise<void> => {\n`;
      output += `      await baseLocator.selectOption({ label: text });\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    dropdown.selectByValue = async (value: string): Promise<void> => {\n`;
      output += `      await baseLocator.selectOption({ value });\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    dropdown.selectByIndex = async (index: number): Promise<void> => {\n`;
      output += `      await baseLocator.selectOption({ index });\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    dropdown.getOptions = async (): Promise<string[]> => {\n`;
      output += `      return baseLocator.locator('option').allTextContents();\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    return dropdown;\n`;
      output += `  }\n\n`;
    });
  }
  
  // Add methods for standard dynamic locators
  if (standardMethods.length > 0) {
    output += `  // Dynamic Standard Element Getters\n`;
    standardMethods.forEach(method => {
      const paramList = method.params.map(p => `${p.name}: ${mapJavaTypeToTypeScript(p.type)}`).join(', ');
      const paramNames = method.params.map(p => p.name).join(', ');
      
      output += `  ${method.name}(${paramList}): Locator {\n`;
      output += `    return this.page.locator(this.${method.name}(${paramNames}));\n`;
      output += `  }\n\n`;
    });
  }
  
  // Add methods for dropdown dynamic locators
  if (dropdownMethods.length > 0) {
    output += `  // Dynamic Dropdown Element Getters\n`;
    dropdownMethods.forEach(method => {
      const paramList = method.params.map(p => `${p.name}: ${mapJavaTypeToTypeScript(p.type)}`).join(', ');
      const paramNames = method.params.map(p => p.name).join(', ');
      
      output += `  ${method.name}(${paramList}): Locator & DropdownOptions {\n`;
      output += `    const baseLocator = this.page.locator(this.${method.name}(${paramNames}));\n`;
      output += `    \n`;
      output += `    // Add dropdown specific functionality\n`;
      output += `    const dropdown = baseLocator as Locator & DropdownOptions;\n`;
      output += `    \n`;
      output += `    dropdown.selectByText = async (text: string): Promise<void> => {\n`;
      output += `      await baseLocator.selectOption({ label: text });\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    dropdown.selectByValue = async (value: string): Promise<void> => {\n`;
      output += `      await baseLocator.selectOption({ value });\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    dropdown.selectByIndex = async (index: number): Promise<void> => {\n`;
      output += `      await baseLocator.selectOption({ index });\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    dropdown.getOptions = async (): Promise<string[]> => {\n`;
      output += `      return baseLocator.locator('option').allTextContents();\n`;
      output += `    };\n`;
      output += `    \n`;
      output += `    return dropdown;\n`;
      output += `  }\n\n`;
    });
  }
  
  // Common page actions converted from the original class
  output += `  // Common Page Actions\n`;
  output += `  async waitForPageToLoad(): Promise<void> {\n`;
  output += `    await this.page.waitForLoadState('networkidle');\n`;
  output += `  }\n\n`;
  
  output += `  async sleep(ms: number): Promise<void> {\n`;
  output += `    return new Promise(resolve => setTimeout(resolve, ms));\n`;
  output += `  }\n`;
  
  // Close class
  output += `}\n`;
  
  return output;
}

/**
 * Map Java types to TypeScript types
 */
function mapJavaTypeToTypeScript(javaType: string): string {
  const typeMap: Record<string, string> = {
    'String': 'string',
    'int': 'number',
    'Integer': 'number',
    'boolean': 'boolean',
    'Boolean': 'boolean',
    'double': 'number',
    'Double': 'number',
    'long': 'number',
    'Long': 'number',
    'float': 'number',
    'Float': 'number',
    'Object': 'any',
    'List': 'Array<any>',
    'ArrayList': 'Array<any>',
    'Map': 'Record<string, any>',
    'HashMap': 'Record<string, any>'
  };
  
  // Check for generic types like List<String>
  const genericMatch = javaType.match(/(\w+)<(\w+)>/);
  if (genericMatch) {
    const container = genericMatch[1];
    const innerType = genericMatch[2];
    
    if (container === 'List' || container === 'ArrayList') {
      return `Array<${mapJavaTypeToTypeScript(innerType)}>`;
    } else if (container === 'Map' || container === 'HashMap') {
      return `Record<string, ${mapJavaTypeToTypeScript(innerType)}>`;
    }
  }
  
  return typeMap[javaType] || 'any';
}

// Process command line arguments
if (require.main === module) {
  const args = process.argv.slice(2);
  
  // Check for debug flag
  if (args.includes('--debug') || args.includes('-d')) {
    DEBUG = true;
    // Remove debug flag from args
    const debugIndex = args.indexOf('--debug') !== -1 ? args.indexOf('--debug') : args.indexOf('-d');
    args.splice(debugIndex, 1);
    console.log('Running in DEBUG mode - verbose logging enabled');
  }
  
  if (args.length !== 2) {
    console.log(`
Usage:
  For single file:   node qaf-to-playwright-converter.js <input-file.java> <output-file.ts>
  For directories:   node qaf-to-playwright-converter.js <input-dir> <output-dir>
  
Options:
  --debug, -d        Enable debug mode with verbose logging
`);
    process.exit(1);
  }
  
  const inputPath = args[0];
  const outputPath = args[1];
  
  // Check if input is a directory or a single file
  const stat = fs.statSync(inputPath);
  
  if (stat.isDirectory()) {
    // Process entire directory
    processDirectory(inputPath, outputPath);
  } else {
    // Process single file
    convertFile(inputPath, outputPath);
  }
}

// Export functions for testing
module.exports = {
  convertFile,
  processDirectory,
  extractLocatorValue
};
