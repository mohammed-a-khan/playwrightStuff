package com.yourcompany.steps.api;

import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.qmetry.qaf.automation.step.QAFTestStep;
import com.qmetry.qaf.automation.util.Reporter;
import com.qmetry.qaf.automation.util.Validator;
import com.yourcompany.api.core.BaseAPIEndpoint;

/**
 * Base class for all API step definition classes.
 * Provides common step definitions that can be used across all API tests.
 */
public abstract class BaseAPISteps {
    
    protected static final Log logger = LogFactory.getLog(BaseAPISteps.class);
    
    /**
     * Gets the endpoint for this steps class.
     * 
     * @return the API endpoint
     */
    protected abstract BaseAPIEndpoint getEndpoint();
    
    /**
     * Verifies that the response status code matches the expected value.
     * This method will take the expectedStatus from the test data if not provided.
     * 
     * @param expectedStatus the expected HTTP status code
     */
    @QAFTestStep(description = "the response status code should be {expectedStatus}")
    public void theResponseStatusCodeShouldBe(int expectedStatus) {
        int actualStatus = getEndpoint().getStatusCode();
        
        Reporter.log("Verifying response status code: expected=" + expectedStatus + ", actual=" + actualStatus);
        assertThat("Response status code", actualStatus, is(equalTo(expectedStatus)));
    }
    
    /**
     * Verifies that the response is successful (status code 2xx).
     */
    @QAFTestStep(description = "the response should be successful")
    public void theResponseShouldBeSuccessful() {
        boolean successful = getEndpoint().isSuccessful();
        
        Reporter.log("Verifying response is successful: " + successful);
        assertThat("Response is successful", successful, is(true));
    }
    
    /**
     * Verifies that the response contains the specified field.
     * 
     * @param field the field to check for
     */
    @QAFTestStep(description = "the response should contain the field {field}")
    public void theResponseShouldContainField(String field) {
        boolean hasField = getEndpoint().hasField(field);
        
        Reporter.log("Verifying response contains field '" + field + "': " + hasField);
        assertThat("Response contains field '" + field + "'", hasField, is(true));
    }
    
    /**
     * Verifies that the response field has the expected value.
     * 
     * @param field the field to check
     * @param expectedValue the expected value
     */
    @QAFTestStep(description = "the response field {field} should be {expectedValue}")
    public void theResponseFieldShouldBe(String field, String expectedValue) {
        String actualValue = getEndpoint().getResponseValue(field);
        
        Reporter.log("Verifying response field '" + field + "': expected=" + expectedValue + ", actual=" + actualValue);
        
        assertThat("Response field '" + field + "' exists", actualValue, is(notNullValue()));
        assertThat("Response field '" + field + "' value", actualValue, is(equalTo(expectedValue)));
    }
    
    /**
     * Verifies that the response field contains the expected text.
     * 
     * @param field the field to check
     * @param expectedText the text that should be contained
     */
    @QAFTestStep(description = "the response field {field} should contain {expectedText}")
    public void theResponseFieldShouldContain(String field, String expectedText) {
        String actualValue = getEndpoint().getResponseValue(field);
        
        Reporter.log("Verifying response field '" + field + "' contains: " + expectedText);
        
        assertThat("Response field '" + field + "' exists", actualValue, is(notNullValue()));
        Validator.verifyThat("Response field '" + field + "' contains expected text", 
                actualValue.contains(expectedText), is(true));
    }
    
    /**
     * Verifies that the response field does not contain the expected text.
     * 
     * @param field the field to check
     * @param unexpectedText the text that should not be contained
     */
    @QAFTestStep(description = "the response field {field} should not contain {unexpectedText}")
    public void theResponseFieldShouldNotContain(String field, String unexpectedText) {
        String actualValue = getEndpoint().getResponseValue(field);
        
        Reporter.log("Verifying response field '" + field + "' does not contain: " + unexpectedText);
        
        assertThat("Response field '" + field + "' exists", actualValue, is(notNullValue()));
        Validator.verifyThat("Response field '" + field + "' does not contain unexpected text", 
                !actualValue.contains(unexpectedText), is(true));
    }
    
    /**
     * Verifies that the response contains a non-empty array field.
     * 
     * @param arrayField the array field to check
     */
    @QAFTestStep(description = "the response should contain a non-empty {arrayField} array")
    public void theResponseShouldContainNonEmptyArray(String arrayField) {
        if (!getEndpoint().hasField(arrayField)) {
            assertThat("Response contains array field '" + arrayField + "'", false, is(true));
            return;
        }
        
        String arrayValue = getEndpoint().getResponseValue(arrayField);
        boolean isNonEmptyArray = arrayValue != null && arrayValue.startsWith("[") && 
                                 !arrayValue.equals("[]") && arrayValue.endsWith("]");
        
        Reporter.log("Verifying response contains non-empty array '" + arrayField + "': " + isNonEmptyArray);
        assertThat("Response contains non-empty array '" + arrayField + "'", isNonEmptyArray, is(true));
    }
}
