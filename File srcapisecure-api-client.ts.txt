// src/step-definitions/api-steps/trade-api-steps.ts
import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';
import { TradeApiClient } from '../../api/trade-api-client';
import { TestContext } from '../../support/test-context';

/**
 * Interface for Trade Search Parameters
 */
interface TradeSearchParams {
  tradeDate?: string;
  symbol?: string;
  side?: string;
  trader?: string;
  [key: string]: any;
}

Given('I have initialized the Trade API client', async function(this: TestContext) {
  const apiBaseUrl = this.config.getString('API_BASE_URL', 'https://api.example.com');
  
  // Get certificate settings from config or environment
  const pfxPath = this.config.getString('CERTIFICATE_PATH', '');
  const pfxPassphrase = this.config.getString('CERTIFICATE_PASSPHRASE', '');
  
  // Get proxy URL if configured
  const proxyUrl = this.config.getString('PROXY_URL', '');
  
  // Create the Trade API client
  this.tradeApiClient = new TradeApiClient(
    apiBaseUrl,
    // Only include certificate if path is provided
    pfxPath ? { path: pfxPath, passphrase: pfxPassphrase } : undefined,
    // Only include proxy if URL is provided
    proxyUrl || undefined
  );
  
  this.logger.info('Trade API client initialized');
});

Given('I have an active trade API session', async function(this: TestContext) {
  if (!this.tradeApiClient) {
    throw new Error('Trade API client not initialized. Please use "I have initialized the Trade API client" step first.');
  }
  
  // Initialize session - fixed to properly await the Promise
  await this.tradeApiClient.initializeSession();
  this.logger.info('Active session established successfully');
});

When('I search for trades with the following criteria:', async function(this: TestContext, dataTable) {
  if (!this.tradeApiClient) {
    throw new Error('Trade API client not initialized. Please use "I have initialized the Trade API client" step first.');
  }
  
  // Convert the data table to search parameters
  const rawData = dataTable.rowsHash();
  const searchParams: TradeSearchParams = {};
  
  // Process and convert data types as needed
  Object.entries(rawData).forEach(([key, value]) => {
    searchParams[key] = value;
  });
  
  // Store search parameters for later steps
  this.testData.searchParams = searchParams;
  
  // Perform the search
  this.logger.info(`Searching trades with params: ${JSON.stringify(searchParams)}`);
  this.response = await this.tradeApiClient.searchTrades(searchParams);
  
  // Store results for later steps
  this.testData.searchResults = this.response.data;
});

When('I retrieve trade details for trade ID {string}', async function(this: TestContext, tradeId: string) {
  if (!this.tradeApiClient) {
    throw new Error('Trade API client not initialized. Please use "I have initialized the Trade API client" step first.');
  }
  
  // Store trade ID for later steps
  this.testData.tradeId = tradeId;
  
  // Get trade details
  this.logger.info(`Retrieving details for trade ID: ${tradeId}`);
  this.response = await this.tradeApiClient.getTradeById(tradeId);
  
  // Store trade details for later steps
  this.testData.tradeDetails = this.response.data;
});

Then('the trade search should return at least {int} results', async function(this: TestContext, minResults: number) {
  // Fixed: Check for undefined response
  if (!this.response) {
    throw new Error('No response received from trade search');
  }
  
  expect(this.response.data).toBeDefined();
  
  const results = Array.isArray(this.response.data) 
    ? this.response.data 
    : (this.response.data.trades || this.response.data.results || []);
    
  this.logger.info(`Search returned ${results.length} trades`);
  
  // Verify minimum number of results
  expect(results.length).toBeGreaterThanOrEqual(minResults);
});

Then('the trade details should include the correct symbol {string}', async function(this: TestContext, expectedSymbol: string) {
  // Fixed: Check for undefined response
  if (!this.response) {
    throw new Error('No response received from trade details request');
  }
  
  expect(this.response.data).toBeDefined();
  
  const tradeDetails = this.response.data;
  
  // Verify symbol
  expect(tradeDetails.symbol).toBe(expectedSymbol);
  this.logger.info(`Verified trade has symbol: ${expectedSymbol}`);
});

Then('the API response should have status code {int}', async function(this: TestContext, expectedStatus: number) {
  // Fixed: Check for undefined response
  if (!this.response) {
    throw new Error('No response received from API');
  }
  
  expect(this.response.status).toBe(expectedStatus);
  this.logger.info(`Response status code: ${this.response.status}`);
});
