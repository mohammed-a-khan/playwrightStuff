// CALLBACK PATTERN (if you prefer this approach)
When('I search for trades with following filters', function(this: TestContext, dataTable, callback) {
  // Ensure trade API client exists
  if (!this.tradeApiClient) {
    return callback(new Error('Trade API client is not initialized'));
  }
  
  try {
    // Use JSON file as the primary source
    const filePath = path.resolve(process.cwd(), 'requests', 'trade-search.json');
    
    // Read the JSON file and parse it
    const fileContent = fs.readFileSync(filePath, 'utf8');
    const requestData = JSON.parse(fileContent);
    
    // Apply dataTable overrides if present
    if (dataTable) {
      const filters = dataTable.rowsHash();
      // Apply the filters to requestData
      // ...rest of your filter handling code
    }
    
    // Store in test data
    if (!this.testData) {
      this.testData = {};
    }
    this.testData.tradeFilters = requestData;
    
    // IMPORTANT: Use the callback pattern consistently
    this.tradeApiClient.searchTrades(requestData)
      .then(searchResult => {
        this.response = {
          data: searchResult,
          status: 200,
          statusText: 'OK',
          headers: {},
          config: {} as any,
        };
        callback(); // Signal success
      })
      .catch(error => {
        if (axios.isAxiosError(error) && error.response) {
          this.response = error.response;
          callback(); // Signal success even though API returned error
        } else {
          callback(error); // Signal test failure
        }
      });
  } catch (error) {
    callback(error); // Signal test failure
  }
});
