import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';
import { TradeApiClient } from '../../api/trade-api-client';
import { TestContext } from '../../support/test-context';

Given('I have a Trade API client', async function(this: TestContext) {
  this.tradeApiClient = new TradeApiClient();
});

When('I search for trades with the following filters', async function(this: TestContext, dataTable) {
  const filters = dataTable.rowsHash();
  
  // Convert comma-separated values to arrays
  if (filters.accountNumFilter) {
    filters.accountNumFilter = filters.accountNumFilter.split(',');
  }
  if (filters.tradeStatusFilter) {
    filters.tradeStatusFilter = filters.tradeStatusFilter.split(',');
  }
  if (filters.tradeTypeFilter) {
    filters.tradeTypeFilter = filters.tradeTypeFilter.split(',');
  }
  
  // Convert string to boolean for priorityOrder
  if (filters.priorityOrder) {
    filters.priorityOrder = filters.priorityOrder === 'true';
  }
  
  // Store filters for later assertions
  this.testData.tradeFilters = filters;
  
  // Execute the search
  this.logger.info(`Searching trades with filters: ${JSON.stringify(filters)}`);
  this.response = await this.tradeApiClient.searchTrades(filters);
});

Then('the API should return a successful response', async function(this: TestContext) {
  expect(this.response).toBeDefined();
  this.logger.info(`Response received with ${this.response.trades.length} trades`);
});

Then('the response should contain trades matching the filters', async function(this: TestContext) {
  const filters = this.testData.tradeFilters;
  const trades = this.response.trades;
  
  expect(trades).toBeDefined();
  expect(Array.isArray(trades)).toBeTruthy();
  
  // Check that trades match the filters
  if (trades.length > 0) {
    this.logger.info(`Verifying ${trades.length} trades match the filters`);
    
    // Verify account numbers if filter was provided
    if (filters.accountNumFilter && filters.accountNumFilter.length > 0) {
      for (const trade of trades) {
        expect(filters.accountNumFilter).toContain(trade.accountNum);
      }
    }
    
    // Verify trade status if filter was provided
    if (filters.tradeStatusFilter && filters.tradeStatusFilter.length > 0) {
      for (const trade of trades) {
        expect(filters.tradeStatusFilter).toContain(trade.tradeStatus);
      }
    }
    
    // Verify trade type if filter was provided
    if (filters.tradeTypeFilter && filters.tradeTypeFilter.length > 0) {
      for (const trade of trades) {
        expect(filters.tradeTypeFilter).toContain(trade.tradeType);
      }
    }
  }
});
