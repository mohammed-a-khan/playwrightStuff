package com.yourcompany.api.utils;

import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;

import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.qmetry.qaf.automation.core.ConfigurationManager;
import com.qmetry.qaf.automation.util.PropertyUtil;

/**
 * Utility class for managing SSL certificates for API requests.
 */
public class CertificateManager {
    
    private static final Log logger = LogFactory.getLog(CertificateManager.class);
    private static final PropertyUtil props = ConfigurationManager.getBundle();
    private static SSLContext sslContext;
    
    /**
     * Configures and returns the SSL context with the specified certificate.
     * 
     * @return configured SSLContext
     */
    public static SSLContext getSSLContext() {
        if (sslContext == null) {
            try {
                String certificateFile = props.getString("certificate.file");
                String certificatePassword = props.getString("certificate.password");
                
                logger.info("Loading certificate from: " + certificateFile);
                
                KeyStore keyStore = KeyStore.getInstance("PKCS12");
                try (FileInputStream fis = new FileInputStream(certificateFile)) {
                    keyStore.load(fis, certificatePassword.toCharArray());
                }
                
                KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
                keyManagerFactory.init(keyStore, certificatePassword.toCharArray());
                KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();
                
                sslContext = SSLContext.getInstance("TLS");
                sslContext.init(keyManagers, null, null);
                
                logger.info("SSL context initialized successfully");
                
            } catch (KeyStoreException | NoSuchAlgorithmException | CertificateException | IOException 
                    | UnrecoverableKeyException | java.security.KeyManagementException e) {
                logger.error("Failed to configure SSL context: " + e.getMessage(), e);
                throw new RuntimeException("Failed to configure SSL context: " + e.getMessage(), e);
            }
        }
        return sslContext;
    }
}
