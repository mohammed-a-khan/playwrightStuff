import * as handlebars from 'handlebars';
import * as dayjs from 'dayjs';
import { TestReport, TestResult } from '../models/reportModels';

/**
 * Enhanced Template Engine for generating visually impressive HTML reports
 */
export class TemplateEngine {
  constructor() {
    this.registerHelpers();
  }

  /**
   * Register Handlebars helpers
   */
  private registerHelpers(): void {
    // Format date helper
    handlebars.registerHelper('formatDate', (date: string, format?: string) => {
      if (!date) return '';
      try {
        return format ? 
          dayjs(date).format(format) : 
          dayjs(date).format('YYYY-MM-DD HH:mm:ss');
      } catch (e) {
        return date;
      }
    });

    // Format duration helper
    handlebars.registerHelper('formatDuration', (ms: number) => {
      if (ms === undefined || ms === null) return '0ms';
      try {
        if (ms < 1000) return `${ms}ms`;
        const seconds = Math.floor(ms / 1000);
        const remainingMs = ms % 1000;
        return seconds > 0 ? 
          `${seconds}.${remainingMs.toString().padStart(3, '0')}s` : 
          `${ms}ms`;
      } catch (e) {
        return `${ms}ms`;
      }
    });

    // Calculate pass percentage helper
    handlebars.registerHelper('passPercentage', (passed: number, total: number) => {
      try {
        if (total === 0) return 0;
        return Math.round((passed / total) * 100);
      } catch (e) {
        return 0;
      }
    });

    // Fixed type annotations for conditional helpers
    handlebars.registerHelper('ifEqual', function(this: any, arg1: any, arg2: any, options: handlebars.HelperOptions) {
      return (arg1 == arg2) ? options.fn(this) : options.inverse(this);
    });

    handlebars.registerHelper('ifNotEqual', function(this: any, arg1: any, arg2: any, options: handlebars.HelperOptions) {
      return (arg1 != arg2) ? options.fn(this) : options.inverse(this);
    });

    // Calculate average test duration
    handlebars.registerHelper('avgDuration', function(this: any, results: TestResult[]) {
      if (!results || results.length === 0) return '0ms';
      const total = results.reduce((sum, test) => sum + test.duration, 0);
      return Math.round(total / results.length);
    });

    // Get longest running test
    handlebars.registerHelper('longestTest', function(this: any, results: TestResult[]) {
      if (!results || results.length === 0) return { scenario: 'None', duration: 0 };
      return results.reduce((longest, test) => 
        test.duration > longest.duration ? { scenario: test.scenario, duration: test.duration } : longest, 
        { scenario: '', duration: 0 }
      );
    });
    
    // Sum helper for calculations
    handlebars.registerHelper('sum', function(this: any, a: number, b: number) {
      return (a || 0) + (b || 0);
    });
  }

  /**
   * Generate report HTML from template
   * @param reportData Report data
   * @returns HTML content
   */
  public generateReportHtml(reportData: TestReport): string {
    const template = this.getReportTemplate();
    const compiledTemplate = handlebars.compile(template);
    return compiledTemplate(reportData);
  }

  /**
   * Get report template
   * @returns Template string
   */
  private getReportTemplate(): string {
    return `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>API Test Report</title>
      <link rel="preconnect" href="https://fonts.googleapis.com">
      <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/luxon@2.0.2"></script>
      <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0"></script>
      <style>
        :root {
          --primary-color: #3f51b5;
          --secondary-color: #009688;
          --success-color: #4caf50;
          --warning-color: #ff9800;
          --danger-color: #f44336;
          --info-color: #2196f3;
          --light-color: #f5f5f5;
          --dark-color: #333;
          --primary-bg: #f9fafc;
          --card-bg: #fff;
          --card-shadow: 0 4px 20px rgba(0,0,0,0.08);
          --border-radius: 8px;
          --transition-speed: 0.3s;
        }

        [data-theme="dark"] {
          --primary-color: #5c6bc0;
          --secondary-color: #26a69a;
          --success-color: #66bb6a;
          --warning-color: #ffa726;
          --danger-color: #ef5350;
          --info-color: #42a5f5;
          --light-color: #424242;
          --dark-color: #f5f5f5;
          --primary-bg: #303030;
          --card-bg: #424242;
          --card-shadow: 0 4px 20px rgba(0,0,0,0.2);
        }

        [data-theme="colorful"] {
          --primary-color: #6a1b9a;
          --secondary-color: #00897b;
          --success-color: #2e7d32;
          --warning-color: #ff6f00;
          --danger-color: #c62828;
          --info-color: #0277bd;
          --primary-bg: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
          --card-bg: rgba(255, 255, 255, 0.9);
          --card-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }

        body {
          font-family: 'Roboto', sans-serif;
          margin: 0;
          padding: 0;
          background: var(--primary-bg);
          color: var(--dark-color);
          line-height: 1.6;
          transition: background var(--transition-speed), color var(--transition-speed);
        }

        .container {
          max-width: 1280px;
          margin: 0 auto;
          padding: 20px;
        }

        .report-header {
          background-color: var(--card-bg);
          padding: 30px;
          border-radius: var(--border-radius);
          margin-bottom: 30px;
          box-shadow: var(--card-shadow);
          border-top: 4px solid var(--primary-color);
          transition: background-color var(--transition-speed), box-shadow var(--transition-speed);
        }

        .report-title {
          margin: 0;
          color: var(--primary-color);
          font-size: 28px;
          font-weight: 700;
          border-bottom: 2px solid #eaeaea;
          padding-bottom: 15px;
          margin-bottom: 20px;
          transition: color var(--transition-speed);
        }

        .report-info {
          display: flex;
          flex-wrap: wrap;
          gap: 20px;
        }

        .info-item {
          flex: 1 1 200px;
        }

        .info-label {
          font-weight: 500;
          color: #757575;
          font-size: 14px;
          margin-bottom: 5px;
        }

        .info-value {
          font-size: 16px;
          font-weight: 500;
        }

        .report-summary {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }

        .summary-item {
          background-color: var(--card-bg);
          padding: 20px;
          border-radius: var(--border-radius);
          box-shadow: var(--card-shadow);
          text-align: center;
          transition: transform 0.3s, background-color var(--transition-speed), box-shadow var(--transition-speed);
          position: relative;
          overflow: hidden;
        }

        .summary-item:hover {
          transform: translateY(-5px);
          box-shadow: 0 6px 25px rgba(0,0,0,0.1);
        }

        .summary-item::after {
          content: '';
          position: absolute;
          top: 0;
          right: 0;
          width: 100%;
          height: 4px;
          transition: width 0.3s ease;
        }

        .summary-item.total::after { background-color: var(--info-color); }
        .summary-item.passed::after { background-color: var(--success-color); }
        .summary-item.failed::after { background-color: var(--danger-color); }
        .summary-item.skipped::after { background-color: var(--warning-color); }
        .summary-item.pending::after { background-color: #9e9e9e; }

        .summary-item:hover::after {
          width: 100%;
        }

        .summary-title {
          font-size: 14px;
          font-weight: 500;
          color: #757575;
          margin: 0 0 10px 0;
          text-transform: uppercase;
          letter-spacing: 1px;
        }

        .summary-value {
          font-size: 42px;
          font-weight: 700;
          margin: 0;
          transition: color 0.3s;
        }

        .summary-value.passed { color: var(--success-color); }
        .summary-value.failed { color: var(--danger-color); }
        .summary-value.skipped { color: var(--warning-color); }
        .summary-value.pending { color: #9e9e9e; }

        .charts-container {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }

        .chart-card {
          background-color: var(--card-bg);
          padding: 20px;
          border-radius: var(--border-radius);
          box-shadow: var(--card-shadow);
          transition: background-color var(--transition-speed), box-shadow var(--transition-speed);
        }

        .chart-title {
          margin-top: 0;
          margin-bottom: 20px;
          font-size: 18px;
          color: var(--dark-color);
          border-bottom: 1px solid #eaeaea;
          padding-bottom: 10px;
          transition: color var(--transition-speed);
        }

        .chart-container {
          position: relative;
          height: 250px;
        }

        .progress-container {
          height: 10px;
          background-color: #e0e0e0;
          border-radius: 5px;
          overflow: hidden;
          margin: 20px 0;
        }

        .progress-bar {
          height: 100%;
          background-color: var(--success-color);
          border-radius: 5px;
          transition: width 1.5s ease-in-out, background-color var(--transition-speed);
          width: 0;
        }

        .test-results {
          background-color: var(--card-bg);
          border-radius: var(--border-radius);
          box-shadow: var(--card-shadow);
          overflow: hidden;
          margin-bottom: 30px;
          transition: background-color var(--transition-speed), box-shadow var(--transition-speed);
        }

        .section-title {
          padding: 20px;
          margin: 0;
          background-color: rgba(0,0,0,0.02);
          border-bottom: 1px solid rgba(0,0,0,0.05);
          font-size: 20px;
          color: var(--primary-color);
          font-weight: 500;
          transition: color var(--transition-speed), background-color var(--transition-speed);
        }

        .results-table {
          width: 100%;
          border-collapse: collapse;
        }

        .results-table th,
        .results-table td {
          padding: 15px;
          text-align: left;
          border-bottom: 1px solid rgba(0,0,0,0.05);
          transition: background-color var(--transition-speed);
        }

        .results-table th {
          background-color: rgba(0,0,0,0.02);
          font-weight: 500;
          color: #757575;
          position: sticky;
          top: 0;
          z-index: 10;
        }

        .results-table tr {
          transition: background-color 0.2s;
        }

        .results-table tr:hover {
          background-color: rgba(0,0,0,0.01);
        }

        .results-table tr:last-child td {
          border-bottom: none;
        }

        .status-pill {
          display: inline-block;
          padding: 5px 12px;
          border-radius: 20px;
          font-weight: 500;
          font-size: 12px;
          text-transform: uppercase;
          letter-spacing: 0.5px;
          transition: background-color var(--transition-speed), color var(--transition-speed);
        }

        .status-pill.passed { background-color: rgba(76, 175, 80, 0.1); color: var(--success-color); }
        .status-pill.failed { background-color: rgba(244, 67, 54, 0.1); color: var(--danger-color); }
        .status-pill.skipped { background-color: rgba(255, 152, 0, 0.1); color: var(--warning-color); }
        .status-pill.pending { background-color: rgba(158, 158, 158, 0.1); color: #9e9e9e; }

        .error-details {
          padding: 15px;
          background-color: rgba(244, 67, 54, 0.05);
          color: var(--danger-color);
          border-radius: 5px;
          margin-top: 10px;
          font-family: 'Courier New', monospace;
          white-space: pre-wrap;
          font-size: 13px;
          display: none;
          transition: background-color var(--transition-speed), color var(--transition-speed);
        }

        .toggle-error {
          cursor: pointer;
          color: var(--info-color);
          text-decoration: underline;
          display: inline-block;
          margin-top: 10px;
          font-size: 14px;
          transition: color var(--transition-speed);
        }

        .toggle-btn {
          background-color: var(--info-color);
          color: white;
          border: none;
          border-radius: 4px;
          padding: 6px 12px;
          cursor: pointer;
          font-size: 12px;
          margin-right: 5px;
          transition: background-color 0.2s, transform 0.2s;
        }

        .toggle-btn:hover {
          background-color: #1976d2;
          transform: translateY(-2px);
        }

        .toggle-btn:focus {
          outline: none;
          box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.4);
        }

        .duration {
          font-family: 'Courier New', monospace;
          color: #757575;
          font-weight: 500;
        }

        .screenshot-link {
          display: inline-block;
          padding: 5px 10px;
          background-color: var(--info-color);
          color: white;
          border-radius: 4px;
          text-decoration: none;
          margin-top: 10px;
          font-size: 12px;
          transition: background-color 0.2s, transform 0.2s;
        }

        .screenshot-link:hover {
          background-color: #1976d2;
          transform: translateY(-2px);
        }

        .steps-container {
          margin: 10px 0;
          display: none;
          border-left: 3px solid #e0e0e0;
          margin-left: 10px;
          padding-left: 20px;
        }

        .step-item {
          margin-bottom: 10px;
          padding: 8px 12px;
          border-radius: 4px;
          background-color: rgba(0,0,0,0.01);
          position: relative;
          transition: background-color var(--transition-speed);
        }

        .step-item:before {
          content: '';
          position: absolute;
          left: -23px;
          top: 50%;
          width: 10px;
          height: 3px;
          background-color: #e0e0e0;
        }

        .step-keyword {
          font-weight: 700;
          margin-right: 5px;
          color: var(--primary-color);
          transition: color var(--transition-speed);
        }

        .step-name {
          font-weight: 400;
        }

        .step-status {
          float: right;
          font-size: 12px;
          transition: color var(--transition-speed);
        }

        .step-status.passed { color: var(--success-color); }
        .step-status.failed { color: var(--danger-color); }
        .step-status.skipped { color: var(--warning-color); }
        .step-status.pending { color: #9e9e9e; }

        .badge {
          display: inline-block;
          padding: 2px 8px;
          border-radius: 12px;
          font-size: 12px;
          font-weight: 500;
          margin-left: 8px;
          transition: background-color var(--transition-speed), color var(--transition-speed);
        }

        .badge-primary { background-color: rgba(33, 150, 243, 0.1); color: var(--info-color); }
        .badge-success { background-color: rgba(76, 175, 80, 0.1); color: var(--success-color); }
        .badge-danger { background-color: rgba(244, 67, 54, 0.1); color: var(--danger-color); }
        .badge-warning { background-color: rgba(255, 152, 0, 0.1); color: var(--warning-color); }

        .footer {
          text-align: center;
          margin-top: 40px;
          padding: 20px;
          color: #757575;
          font-size: 14px;
          background-color: var(--card-bg);
          border-radius: var(--border-radius);
          box-shadow: var(--card-shadow);
          transition: background-color var(--transition-speed), box-shadow var(--transition-speed);
        }

        /* Theme selector */
        .theme-selector {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 1000;
          display: flex;
          gap: 10px;
        }

        .theme-btn {
          width: 30px;
          height: 30px;
          border-radius: 50%;
          border: 2px solid #fff;
          cursor: pointer;
          box-shadow: 0 2px 5px rgba(0,0,0,0.2);
          transition: transform 0.2s;
        }

        .theme-btn:hover {
          transform: scale(1.1);
        }

        .theme-btn.light {
          background-color: #f5f7fa;
        }

        .theme-btn.dark {
          background-color: #303030;
        }

        .theme-btn.colorful {
          background: linear-gradient(135deg, #6a1b9a 0%, #00897b 100%);
        }

        /* Animation */
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }

        .summary-item, .test-results, .chart-card {
          animation: fadeIn 0.5s ease-out forwards;
        }

        .summary-item:nth-child(1) { animation-delay: 0.1s; }
        .summary-item:nth-child(2) { animation-delay: 0.2s; }
        .summary-item:nth-child(3) { animation-delay: 0.3s; }
        .summary-item:nth-child(4) { animation-delay: 0.4s; }

        /* Animated counter styles */
        .counter-animation {
          display: inline-block;
          position: relative;
        }

        /* Analysis section */
        .analysis-card {
          background-color: var(--card-bg);
          border-radius: var(--border-radius);
          box-shadow: var(--card-shadow);
          padding: 20px;
          margin-bottom: 30px;
          transition: background-color var(--transition-speed), box-shadow var(--transition-speed);
        }

        .analysis-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
          gap: 20px;
        }

        .analysis-item {
          padding: 15px;
          background-color: rgba(0,0,0,0.01);
          border-radius: var(--border-radius);
          text-align: center;
        }

        .analysis-label {
          font-size: 14px;
          color: #757575;
          margin-bottom: 5px;
        }

        .analysis-value {
          font-size: 20px;
          font-weight: 600;
          color: var(--primary-color);
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
          .report-info, .report-summary {
            grid-template-columns: 1fr;
          }
          .charts-container {
            grid-template-columns: 1fr;
          }
          .analysis-grid {
            grid-template-columns: 1fr;
          }
          .results-table thead {
            display: none;
          }
          .results-table tbody tr {
            display: block;
            margin-bottom: 15px;
            border: 1px solid #eaeaea;
            border-radius: 5px;
          }
          .results-table tbody td {
            display: block;
            text-align: right;
            padding: 10px;
            position: relative;
            border-bottom: 1px solid #eaeaea;
          }
          .results-table tbody td:before {
            content: attr(data-label);
            float: left;
            font-weight: 700;
            text-transform: uppercase;
            font-size: 12px;
            color: #757575;
          }
          .results-table tbody td:last-child {
            border-bottom: 0;
          }
        }
      </style>
    </head>
    <body>
      <!-- Theme selector -->
      <div class="theme-selector">
        <button class="theme-btn light" data-theme="light" title="Light Theme"></button>
        <button class="theme-btn dark" data-theme="dark" title="Dark Theme"></button>
        <button class="theme-btn colorful" data-theme="colorful" title="Colorful Theme"></button>
      </div>

      <div class="container">
        <div class="report-header">
          <h1 class="report-title">API Test Automation Report</h1>
          <div class="report-info">
            <div class="info-item">
              <div class="info-label">Environment</div>
              <div class="info-value">{{summary.environment}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Base URL</div>
              <div class="info-value">{{summary.baseUrl}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Start Time</div>
              <div class="info-value">{{formatDate summary.startTime}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">End Time</div>
              <div class="info-value">{{formatDate summary.endTime}}</div>
            </div>
            <div class="info-item">
              <div class="info-label">Duration</div>
              <div class="info-value">{{formatDuration summary.totalDuration}}</div>
            </div>
          </div>
        </div>
        
        <div class="report-summary">
          <div class="summary-item total">
            <div class="summary-title">TOTAL TESTS</div>
            <div class="summary-value counter" data-count="{{summary.totalTests}}">0</div>
          </div>
          <div class="summary-item passed">
            <div class="summary-title">PASSED</div>
            <div class="summary-value passed counter" data-count="{{summary.passedTests}}">0</div>
          </div>
          <div class="summary-item failed">
            <div class="summary-title">FAILED</div>
            <div class="summary-value failed counter" data-count="{{summary.failedTests}}">0</div>
          </div>
          <div class="summary-item skipped">
            <div class="summary-title">SKIPPED</div>
            <div class="summary-value skipped counter" data-count="{{summary.skippedTests}}">0</div>
          </div>
          {{#if summary.pendingTests}}
          <div class="summary-item pending">
            <div class="summary-title">PENDING</div>
            <div class="summary-value pending counter" data-count="{{summary.pendingTests}}">0</div>
          </div>
          {{/if}}
        </div>

        <!-- Analysis section -->
        <div class="analysis-card">
          <h2 class="section-title">Test Analysis</h2>
          <div class="analysis-grid">
            <div class="analysis-item">
              <div class="analysis-label">Success Rate</div>
              <div class="analysis-value">{{passPercentage summary.passedTests summary.totalTests}}%</div>
            </div>
            <div class="analysis-item">
              <div class="analysis-label">Average Duration</div>
              <div class="analysis-value">{{formatDuration (avgDuration results)}}</div>
            </div>
            <div class="analysis-item">
              <div class="analysis-label">Longest Test</div>
              <div class="analysis-value">{{formatDuration (longestTest results).duration}}</div>
              <div>{{(longestTest results).scenario}}</div>
            </div>
            <div class="analysis-item">
              <div class="analysis-label">Test Completeness</div>
              <div class="analysis-value">{{passPercentage (sum summary.passedTests summary.failedTests) summary.totalTests}}%</div>
            </div>
          </div>
        </div>
        
        <div class="charts-container">
          <div class="chart-card">
            <h3 class="chart-title">Test Results Distribution</h3>
            <div class="chart-container">
              <canvas id="resultsPieChart"></canvas>
            </div>
          </div>
          
          <div class="chart-card">
            <h3 class="chart-title">Test Execution Timeline</h3>
            <div class="chart-container">
              <canvas id="timelineChart"></canvas>
            </div>
          </div>
        </div>

        <div class="charts-container">
          <div class="chart-card">
            <h3 class="chart-title">Historical Test Results</h3>
            <div class="chart-container">
              <canvas id="historyChart"></canvas>
            </div>
          </div>
          
          <div class="chart-card">
            <h3 class="chart-title">Test Duration Distribution</h3>
            <div class="chart-container">
              <canvas id="durationChart"></canvas>
            </div>
          </div>
        </div>
        
        <div class="progress-container">
          <div class="progress-bar" style="width: 0%" data-width="{{passPercentage summary.passedTests summary.totalTests}}"></div>
        </div>
        
        <div class="test-results">
          <h2 class="section-title">Test Results</h2>
          <table class="results-table">
            <thead>
              <tr>
                <th>Feature</th>
                <th>Scenario</th>
                <th>Status</th>
                <th>Duration</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {{#each results}}
              <tr>
                <td data-label="Feature">{{this.feature}}</td>
                <td data-label="Scenario">{{this.scenario}}</td>
                <td data-label="Status"><span class="status-pill {{this.status}}">{{this.status}}</span></td>
                <td data-label="Duration"><span class="duration">{{formatDuration this.duration}}</span></td>
                <td data-label="Actions">
                  {{#if this.steps}}
                  <button class="toggle-btn" onclick="toggleSteps('{{this.id}}')">Steps</button>
                  {{/if}}
                  
                  {{#if this.error}}
                  <button class="toggle-btn" style="background-color: #f44336;" onclick="toggleError('{{this.id}}')">Error</button>
                  <div id="error-{{this.id}}" class="error-details">{{this.error}}</div>
                  {{/if}}
                  
                  {{#if this.screenshots}}
                  <div>
                    {{#each this.screenshots}}
                    <a href="{{this}}" target="_blank" class="screenshot-link">Screenshot {{@index}}</a>
                    {{/each}}
                  </div>
                  {{/if}}
                </td>
              </tr>
              {{#if this.steps}}
              <tr class="steps-row">
                <td colspan="5" class="steps-cell">
                  <div id="steps-{{this.id}}" class="steps-container">
                    {{#each this.steps}}
                    <div class="step-item">
                      <span class="step-keyword">{{this.keyword}}</span>
                      <span class="step-name">{{this.name}}</span>
                      <span class="step-status {{this.status}}">{{this.status}}</span>
                      {{#if this.error}}
                      <div class="error-details" style="display: block; margin-top: 8px;">{{this.error}}</div>
                      {{/if}}
                    </div>
                    {{/each}}
                  </div>
                </td>
              </tr>
              {{/if}}
              {{/each}}
            </tbody>
          </table>
        </div>
        
        <div class="footer">
          <p>Generated on {{formatDate summary.endTime 'YYYY-MM-DD HH:mm:ss'}} by Enhanced Playwright API Automation Framework</p>
        </div>
      </div>
      
      <script>
        // Toggle error details
        function toggleError(id) {
          const element = document.getElementById('error-' + id);
          if (element.style.display === 'block') {
            element.style.display = 'none';
          } else {
            element.style.display = 'block';
          }
        }
        
        // Toggle steps
        function toggleSteps(id) {
          const element = document.getElementById('steps-' + id);
          if (element.style.display === 'block') {
            element.style.display = 'none';
          } else {
            element.style.display = 'block';
          }
        }

        // Theme switcher
        document.querySelectorAll('.theme-btn').forEach(btn => {
          btn.addEventListener('click', () => {
            const theme = btn.getAttribute('data-theme');
            document.body.setAttribute('data-theme', theme);
            localStorage.setItem('reportTheme', theme);
          });
        });

        // Load saved theme
        const savedTheme = localStorage.getItem('reportTheme');
        if (savedTheme) {
          document.body.setAttribute('data-theme', savedTheme);
        }

        // Animate number counters
        function animateValue(element, start, end, duration) {
          let startTimestamp = null;
          const step = (timestamp) => {
            if (!startTimestamp) startTimestamp = timestamp;
            const progress = Math.min((timestamp - startTimestamp) / duration, 1);
            const currentValue = Math.floor(progress * (end - start) + start);
            element.innerHTML = currentValue;
            if (progress < 1) {
              window.requestAnimationFrame(step);
            } else {
              element.innerHTML = end; // Ensure the final value is set correctly
            }
          };
          window.requestAnimationFrame(step);
        }
        
        // Create charts when the document is loaded
        document.addEventListener('DOMContentLoaded', function() {
          // Animate number counters
          document.querySelectorAll('.counter').forEach(counter => {
            const target = parseInt(counter.getAttribute('data-count'), 10) || 0;
            animateValue(counter, 0, target, 1500);
          });

          // Animate progress bar
          setTimeout(() => {
            const progressBar = document.querySelector('.progress-bar');
            const targetWidth = progressBar.getAttribute('data-width') + '%';
            progressBar.style.width = targetWidth;
          }, 500);

          // Results Pie Chart
          const passedTests = {{summary.passedTests}} || 0;
          const failedTests = {{summary.failedTests}} || 0;
          const skippedTests = {{summary.skippedTests}} || 0;
          
          if (document.getElementById('resultsPieChart')) {
            const ctx = document.getElementById('resultsPieChart').getContext('2d');
            new Chart(ctx, {
              type: 'doughnut',
              data: {
                labels: ['Passed', 'Failed', 'Skipped'],
                datasets: [{
                  data: [passedTests, failedTests, skippedTests],
                  backgroundColor: [
                    '#4caf50',  // Green for passed
                    '#f44336',  // Red for failed
                    '#ff9800'   // Orange for skipped
                  ],
                  borderWidth: 0
                }]
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                  legend: {
                    position: 'right',
                  }
                },
                cutout: '65%',
                animation: {
                  animateScale: true,
                  animateRotate: true,
                  duration: 2000
                }
              }
            });
          }

          // Test Duration Chart
          if (document.getElementById('durationChart')) {
            const durations = [];
            const scenarios = [];
            
            {{#each results}}
            durations.push({{this.duration}});
            scenarios.push("{{this.scenario}}");
            {{/each}}
            
            const durationCtx = document.getElementById('durationChart').getContext('2d');
            new Chart(durationCtx, {
              type: 'bar',
              data: {
                labels: scenarios,
                datasets: [{
                  label: 'Duration (ms)',
                  data: durations,
                  backgroundColor: 'rgba(33, 150, 243, 0.5)',
                  borderColor: 'rgba(33, 150, 243, 1)',
                  borderWidth: 1
                }]
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                  y: {
                    beginAtZero: true,
                    title: {
                      display: true,
                      text: 'Duration (ms)'
                    }
                  },
                  x: {
                    title: {
                      display: true,
                      text: 'Scenarios'
                    },
                    ticks: {
                      display: false
                    }
                  }
                },
                plugins: {
                  tooltip: {
                    callbacks: {
                      title: function(tooltipItems) {
                        return scenarios[tooltipItems[0].dataIndex];
                      }
                    }
                  }
                },
                animation: {
                  duration: 2000
                }
              }
            });
          }

          // Timeline Chart
          if (document.getElementById('timelineChart')) {
            const timelineData = [];
            
            {{#each results}}
            timelineData.push({
              x: new Date("{{this.timestamp}}"),
              y: "{{this.scenario}}",
              status: "{{this.status}}"
            });
            {{/each}}
            
            const timelineCtx = document.getElementById('timelineChart').getContext('2d');
            new Chart(timelineCtx, {
              type: 'scatter',
              data: {
                datasets: [{
                  label: 'Test Execution',
                  data: timelineData,
                  backgroundColor: timelineData.map(item => 
                    item.status === 'passed' ? '#4caf50' : 
                    item.status === 'failed' ? '#f44336' : '#ff9800'
                  ),
                  pointRadius: 7,
                  pointHoverRadius: 9
                }]
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                  x: {
                    type: 'time',
                    time: {
                      unit: 'hour',
                      displayFormats: {
                        hour: 'HH:mm'
                      }
                    },
                    title: {
                      display: true,
                      text: 'Time'
                    }
                  },
                  y: {
                    title: {
                      display: true,
                      text: 'Test Scenarios'
                    }
                  }
                },
                plugins: {
                  tooltip: {
                    callbacks: {
                      label: function(context) {
                        const item = context.raw;
                        return `${item.y} - ${item.status} at ${new Date(item.x).toLocaleTimeString()}`;
                      }
                    }
                  }
                },
                animation: {
                  duration: 2000
                }
              }
            });
          }
          
          // History Chart
          const historyChartElement = document.getElementById('historyChart');
          if (historyChartElement) {
            const historyData = [
              {{#each history}}
              {
                date: "{{this.date}}",
                pass: {{this.pass}},
                fail: {{this.fail}},
                skip: {{this.skip}}
              },
              {{/each}}
            ];
            
            if (historyData.length > 0) {
              const labels = historyData.map(item => item.date);
              const passData = historyData.map(item => item.pass);
              const failData = historyData.map(item => item.fail);
              const skipData = historyData.map(item => item.skip);
              
              const ctx = historyChartElement.getContext('2d');
              new Chart(ctx, {
                type: 'bar',
                data: {
                  labels: labels,
                  datasets: [
                    {
                      label: 'Passed',
                      data: passData,
                      backgroundColor: '#4caf50',
                      borderWidth: 0
                    },
                    {
                      label: 'Failed',
                      data: failData,
                      backgroundColor: '#f44336',
                      borderWidth: 0
                    },
                    {
                      label: 'Skipped',
                      data: skipData,
                      backgroundColor: '#ff9800',
                      borderWidth: 0
                    }
                  ]
                },
                options: {
                  responsive: true,
                  maintainAspectRatio: false,
                  scales: {
                    x: {
                      stacked: true,
                      grid: {
                        display: false
                      }
                    },
                    y: {
                      stacked: true,
                      beginAtZero: true,
                      ticks: {
                        precision: 0
                      }
                    }
                  },
                  plugins: {
                    legend: {
                      position: 'top',
                    }
                  },
                  animation: {
                    duration: 2000
                  }
                }
              });
            }
          }
        });
      </script>
    </body>
    </html>
    `;
  }
}
