When('I search for trades with the following filters', async function(this: TestContext, dataTable) {
  // Ensure trade API client exists
  if (!this.tradeApiClient) {
    throw new Error('Trade API client is not initialized');
  }

  // Get file path or use data table
  let requestData;
  
  if (dataTable) {
    // Use data table to create filters
    const filters: Record<string, any> = dataTable.rowsHash();
    
    // Convert comma-separated values to arrays
    if (filters.accountNumFilter) {
      filters.accountNumFilter = filters.accountNumFilter.split(',');
    }
    if (filters.tradeStatusFilter) {
      filters.tradeStatusFilter = filters.tradeStatusFilter.split(',');
    }
    if (filters.tradeTypeFilter) {
      filters.tradeTypeFilter = filters.tradeTypeFilter.split(',');
    }
    
    // Convert string to boolean for priorityOrder
    if (filters.priorityOrder) {
      filters.priorityOrder = filters.priorityOrder === 'true';
    }
    
    requestData = filters;
  } else {
    // Use JSON file path - use path.resolve to get absolute path
    const filePath = path.resolve(process.cwd(), 'requests', 'trade-search.json');
    
    if (this.logger) {
      this.logger.info(`Using request body from file: ${filePath}`);
    }
    
    // Check if file exists
    if (!fs.existsSync(filePath)) {
      throw new Error(`Request body file not found: ${filePath}`);
    }
    
    requestData = filePath;
  }
  
  // Store request data for later assertions
  if (!this.testData) {
    this.testData = {};
  }
  this.testData.tradeFilters = requestData;
  
  // Execute the search
  if (this.logger) {
    this.logger.info(`Searching trades with filters: ${JSON.stringify(requestData)}`);
  }

  try {
    const searchResult = await this.tradeApiClient.searchTrades(requestData);
    
    // Store the response for later access
    this.response = {
      data: searchResult,
      status: 200,
      statusText: 'OK',
      headers: {},
      config: {} as any,
    };
  } catch (error: unknown) {
    if (axios.isAxiosError(error) && error.response) {
      this.response = error.response;
    } else {
      throw error;
    }
  }
});
