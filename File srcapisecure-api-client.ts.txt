// src/framework/utils/proxy-manager.ts
import { URL } from 'url';
import { ConfigManager } from './config-manager';
import { Logger } from './logger';

/**
 * Proxy configuration interface for axios
 */
export interface ProxyConfig {
  host: string;
  port: number;
  protocol: 'http' | 'https';
  auth?: {
    username: string;
    password: string;
  };
}

/**
 * Proxy Manager for handling HTTP/HTTPS proxies
 * Centralizes proxy configuration and management for API clients
 */
export class ProxyManager {
  private static instance: ProxyManager;
  private logger: Logger;
  private config: ConfigManager;
  private proxyConfigs: Map<string, ProxyConfig> = new Map();
  private initialized: boolean = false;
  private initPromise: Promise<void> | null = null;

  /**
   * Private constructor for singleton pattern
   */
  private constructor() {
    this.logger = new Logger('ProxyManager');
    this.config = ConfigManager.getInstance();
  }

  /**
   * Get singleton instance
   * @returns ProxyManager instance
   */
  public static getInstance(): ProxyManager {
    if (!ProxyManager.instance) {
      ProxyManager.instance = new ProxyManager();
    }
    return ProxyManager.instance;
  }

  /**
   * Initialize the proxy manager
   * Loads proxy configurations from environment/config
   */
  public async init(): Promise<void> {
    if (this.initialized) {
      return;
    }

    if (this.initPromise) {
      return this.initPromise;
    }

    this.initPromise = this.loadProxyConfigurations();
    await this.initPromise;
    this.initialized = true;
  }

  /**
   * Load proxy configurations from configuration
   * @private
   */
  private async loadProxyConfigurations(): Promise<void> {
    try {
      // Ensure config is initialized
      await this.config.init();

      // Load default proxy if configured
      const defaultProxyUrl = await this.config.getString('PROXY_URL', '');
      if (defaultProxyUrl) {
        try {
          const proxyConfig = this.parseProxyUrl(defaultProxyUrl);
          this.proxyConfigs.set('default', proxyConfig);
          this.logger.info(`Loaded default proxy configuration: ${defaultProxyUrl}`);
        } catch (error: any) {
          this.logger.error(`Failed to parse default proxy URL: ${error.message}`);
        }
      }

      // Check for service-specific proxies
      // Format is SERVICE_PROXY_URL, e.g., ASSET_PROXY_URL, AUTH_PROXY_URL
      const allConfig = await this.config.getAll();
      for (const [key, value] of Object.entries(allConfig)) {
        if (typeof value === 'string' && key.endsWith('_PROXY_URL') && value) {
          const serviceName = key.replace('_PROXY_URL', '').toLowerCase();
          try {
            const proxyConfig = this.parseProxyUrl(value);
            this.proxyConfigs.set(serviceName, proxyConfig);
            this.logger.info(`Loaded ${serviceName} proxy configuration: ${value}`);
          } catch (error: any) {
            this.logger.error(`Failed to parse ${serviceName} proxy URL: ${error.message}`);
          }
        }
      }
    } catch (error: any) {
      this.logger.error(`Error initializing proxy manager: ${error.message}`);
    }
  }

  /**
   * Parse a proxy URL into a ProxyConfig object
   * @param proxyUrl - URL string for proxy (e.g., "http://username:password@proxy.example.com:8080")
   * @returns ProxyConfig object for axios
   */
  private parseProxyUrl(proxyUrl: string): ProxyConfig {
    try {
      // Ensure the URL has a protocol
      const formattedProxyUrl = proxyUrl.startsWith('http') 
        ? proxyUrl 
        : `http://${proxyUrl}`;
      
      const parsedUrl = new URL(formattedProxyUrl);
      
      const proxyConfig: ProxyConfig = {
        host: parsedUrl.hostname,
        port: parseInt(parsedUrl.port || '80'),
        protocol: (parsedUrl.protocol.replace(':', '') as 'http' | 'https')
      };
      
      // Add authentication if present
      if (parsedUrl.username && parsedUrl.password) {
        proxyConfig.auth = {
          username: parsedUrl.username,
          password: parsedUrl.password
        };
      }
      
      return proxyConfig;
    } catch (error: any) {
      throw new Error(`Invalid proxy URL (${proxyUrl}): ${error.message}`);
    }
  }

  /**
   * Ensure proxy manager is initialized
   * @private
   */
  private async ensureInitialized(): Promise<void> {
    if (!this.initialized) {
      await this.init();
    }
  }

  /**
   * Get proxy configuration for a specific service
   * @param serviceName - Service name for service-specific proxy, or 'default' for default proxy
   * @returns ProxyConfig object or null if not found
   */
  public async getProxyConfig(serviceName: string = 'default'): Promise<ProxyConfig | null> {
    await this.ensureInitialized();
    
    const normalizedName = serviceName.toLowerCase();
    
    // Check if we already have this proxy configuration loaded
    if (this.proxyConfigs.has(normalizedName)) {
      return this.proxyConfigs.get(normalizedName) || null;
    }
    
    // If not found for the specific service, try loading it from config
    const proxyUrl = await this.config.getString(`${normalizedName.toUpperCase()}_PROXY_URL`, '');
    if (proxyUrl) {
      try {
        const proxyConfig = this.parseProxyUrl(proxyUrl);
        this.proxyConfigs.set(normalizedName, proxyConfig);
        this.logger.info(`Loaded ${normalizedName} proxy configuration from config: ${proxyUrl}`);
        return proxyConfig;
      } catch (error: any) {
        this.logger.error(`Failed to parse ${normalizedName} proxy URL: ${error.message}`);
      }
    }
    
    // Try to fall back to default if a service-specific proxy wasn't found
    if (normalizedName !== 'default' && this.proxyConfigs.has('default')) {
      this.logger.warn(`No proxy found for ${normalizedName}, falling back to default proxy`);
      return this.proxyConfigs.get('default') || null;
    }
    
    return null;
  }

  /**
   * Check if a proxy should be used for a specific host
   * @param host - Hostname to check
   * @returns Whether the proxy should be used
   */
  public async shouldUseProxy(host: string): Promise<boolean> {
    await this.ensureInitialized();
    
    // Get proxy exceptions (NO_PROXY environment variable)
    const noProxyList = process.env.NO_PROXY || process.env.no_proxy || '';
    const exceptions = noProxyList.split(',').map(item => item.trim());
    
    // Don't use proxy for local addresses
    if (
      host === 'localhost' || 
      host === '127.0.0.1' || 
      host.startsWith('192.168.') ||
      host.startsWith('10.') ||
      host.startsWith('172.16.')
    ) {
      return false;
    }
    
    // Check if the host matches any exception
    for (const exception of exceptions) {
      if (!exception) continue;
      
      // Check for wildcard match (e.g., *.example.com)
      if (exception.startsWith('*.') && host.endsWith(exception.substring(1))) {
        return false;
      }
      
      // Check for exact match
      if (exception === host) {
        return false;
      }
      
      // Check for domain match (e.g., example.com matches subdomain.example.com)
      if (host.endsWith(`.${exception}`)) {
        return false;
      }
    }
    
    // If we have any proxy configured, we should use it for this host
    return this.proxyConfigs.size > 0;
  }

  /**
   * Get the appropriate proxy configuration for a URL
   * @param url - URL to get proxy for
   * @param serviceName - Optional service name to use specific proxy
   * @returns ProxyConfig object or null if proxy should not be used
   */
  public async getProxyForUrl(url: string, serviceName?: string): Promise<ProxyConfig | null> {
    try {
      const parsedUrl = new URL(url);
      const host = parsedUrl.hostname;
      
      // Check if we should use a proxy for this host
      const shouldUseProxy = await this.shouldUseProxy(host);
      if (!shouldUseProxy) {
        return null;
      }
      
      // Get the appropriate proxy configuration
      return await this.getProxyConfig(serviceName);
    } catch (error: any) {
      this.logger.error(`Error determining proxy for URL ${url}: ${error.message}`);
      
      // If URL parsing fails, fall back to default proxy
      return serviceName 
        ? await this.getProxyConfig(serviceName) 
        : await this.getProxyConfig();
    }
  }

  /**
   * Add a new proxy configuration
   * @param serviceName - Service name for the proxy
   * @param proxyUrl - URL string for the proxy
   * @returns Whether the proxy was added successfully
   */
  public async addProxy(serviceName: string, proxyUrl: string): Promise<boolean> {
    try {
      await this.ensureInitialized();
      
      const normalizedName = serviceName.toLowerCase();
      const proxyConfig = this.parseProxyUrl(proxyUrl);
      
      this.proxyConfigs.set(normalizedName, proxyConfig);
      this.logger.info(`Added proxy for ${normalizedName}: ${proxyUrl}`);
      
      return true;
    } catch (error: any) {
      this.logger.error(`Failed to add proxy for ${serviceName}: ${error.message}`);
      return false;
    }
  }

  /**
   * Remove a proxy configuration
   * @param serviceName - Service name for the proxy
   * @returns Whether the proxy was removed
   */
  public async removeProxy(serviceName: string): Promise<boolean> {
    await this.ensureInitialized();
    
    const normalizedName = serviceName.toLowerCase();
    
    if (this.proxyConfigs.has(normalizedName)) {
      this.proxyConfigs.delete(normalizedName);
      this.logger.info(`Removed proxy for ${normalizedName}`);
      return true;
    }
    
    return false;
  }

  /**
   * Check if there are any proxy configurations loaded
   * @returns Whether there are any proxies configured
   */
  public async hasProxies(): Promise<boolean> {
    await this.ensureInitialized();
    return this.proxyConfigs.size > 0;
  }

  /**
   * Get all available proxy services
   * @returns Array of service names
   */
  public async getAvailableProxyServices(): Promise<string[]> {
    await this.ensureInitialized();
    return Array.from(this.proxyConfigs.keys());
  }

  /**
   * Test if a proxy is working
   * @param serviceName - Service name for the proxy
   * @returns Whether the proxy is working
   */
  public async testProxy(serviceName: string = 'default'): Promise<boolean> {
    try {
      const axios = require('axios');
      
      const proxyConfig = await this.getProxyConfig(serviceName);
      if (!proxyConfig) {
        this.logger.error(`No proxy configuration found for ${serviceName}`);
        return false;
      }
      
      const testUrl = 'https://httpbin.org/ip';
      
      const response = await axios.get(testUrl, {
        proxy: {
          host: proxyConfig.host,
          port: proxyConfig.port,
          protocol: proxyConfig.protocol,
          auth: proxyConfig.auth
        },
        timeout: 5000
      });
      
      this.logger.info(`Proxy test for ${serviceName} successful`);
      return response.status === 200;
    } catch (error: any) {
      this.logger.error(`Proxy test for ${serviceName} failed: ${error.message}`);
      return false;
    }
  }

  /**
   * Reset all proxy configurations
   * Useful for testing
   */
  public async reset(): Promise<void> {
    this.proxyConfigs.clear();
    this.initialized = false;
    this.initPromise = null;
  }
}
