// src/step-definitions/api-steps/asset-api-steps.ts
import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';
import { AssetApiClient } from '../../api/asset-api-client';
import { TestContext } from '../../support/test-context';
import fs from 'fs';
import path from 'path';

/**
 * Step definitions for Asset API testing using BDD style
 */

// Client initialization
Given('I have initialized the Khan Asset API client', async function(this: TestContext) {
  this.assetApiClient = new AssetApiClient();
  this.logger.info('Initialized Khan Asset API client');
});

// Template-based requests
When('I request assets using the {string} template', async function(this: TestContext, templateName: string) {
  expect(this.assetApiClient).toBeDefined();
  
  this.response = await this.assetApiClient.getAssetsFromTemplate(templateName);
  this.logger.info(`Retrieved assets using template: ${templateName}`);
});

// Dynamic requests
When('I request assets with message ID {string}, deal ID {int}, and report date {string}', 
  async function(this: TestContext, messageId: string, dealId: number, reportDate: string) {
    expect(this.assetApiClient).toBeDefined();
    
    this.response = await this.assetApiClient.getAssets(messageId, dealId, reportDate);
    this.logger.info(`Retrieved assets for deal ID: ${dealId}`);
});

// Request with overrides
When('I request assets with the following details:', async function(this: TestContext, dataTable: any) {
  expect(this.assetApiClient).toBeDefined();
  
  const requestData = dataTable.rowsHash();
  
  // Convert string to number for dealId
  if (requestData.dealId) {
    requestData.dealId = parseInt(requestData.dealId, 10);
  }
  
  this.response = await this.assetApiClient.getAssets(
    requestData.messageId,
    requestData.dealId,
    requestData.reportDate
  );
  
  this.logger.info(`Retrieved assets for deal ID: ${requestData.dealId}`);
});

// Response validation steps
Then('the response should contain asset layouts', async function(this: TestContext) {
  expect(this.response.data).toBeDefined();
  expect(this.response.data.assetLayouts).toBeDefined();
  expect(Array.isArray(this.response.data.assetLayouts)).toBeTruthy();
  this.logger.info(`Response contains ${this.response.data.assetLayouts.length} asset layouts`);
});

Then('the response should have no system errors', async function(this: TestContext) {
  expect(this.response.data.systemError).toBeNull();
  expect(this.response.data.errorMessage).toBeNull();
  expect(this.response.data.validationErrorMessage).toBeNull();
  this.logger.info('Verified no errors in response');
});

Then('the response message ID should be {string}', async function(this: TestContext, expectedId: string) {
  expect(this.response.data.responseMessageId).toBe(expectedId);
  this.logger.info(`Verified response message ID: ${expectedId}`);
});

Then('the response should contain at least {int} asset layouts', async function(this: TestContext, count: number) {
  expect(this.response.data.assetLayouts.length).toBeGreaterThanOrEqual(count);
  this.logger.info(`Verified response contains at least ${count} asset layouts`);
});

Then('the response time should be acceptable', async function(this: TestContext) {
  const maxResponseTime = this.config.getNumber('MAX_RESPONSE_TIME', 5000);
  this.assetApiClient.assertResponseTime(this.response, maxResponseTime);
  this.logger.info(`Verified response time is less than ${maxResponseTime}ms`);
});

// Save response for later analysis
Then('I save the response to file {string}', async function(this: TestContext, filename: string) {
  const responsesDir = path.resolve(process.cwd(), 'responses');
  
  // Create directory if it doesn't exist
  if (!fs.existsSync(responsesDir)) {
    fs.mkdirSync(responsesDir, { recursive: true });
  }
  
  const filePath = path.join(responsesDir, filename);
  fs.writeFileSync(filePath, JSON.stringify(this.response.data, null, 2));
  
  this.logger.info(`Saved response to file: ${filePath}`);
});
