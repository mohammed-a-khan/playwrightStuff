// src/api/trade-api-client.ts
import { BaseApiClient, ApiRequestOptions } from '../framework/base-api-client';
import axios, { AxiosResponse } from 'axios';
import * as fs from 'fs';
import * as https from 'https';

/**
 * Interface for Certificate Options
 */
interface CertificateOptions {
  path: string;
  passphrase: string;
}

/**
 * Trade API client with session management
 */
export class TradeApiClient extends BaseApiClient {
  private pfxOptions?: CertificateOptions;
  private proxyUrl?: string;
  private sessionCookie?: string;

  /**
   * Constructor for the TradeApiClient
   * @param apiBaseUrl - Base URL for API requests
   * @param pfxOptions - PFX certificate options (optional)
   * @param proxyUrl - Proxy URL (optional)
   */
  constructor(
    apiBaseUrl: string,
    pfxOptions?: CertificateOptions,
    proxyUrl?: string
  ) {
    super(apiBaseUrl);
    this.pfxOptions = pfxOptions;
    this.proxyUrl = proxyUrl;
  }

  /**
   * Initialize a session by making a request to the server to get JSESSIONID
   * @returns Promise<string> - The session cookie
   */
  async initializeSession(): Promise<string> {
    this.logger.info('Initializing session to obtain JSESSIONID');
    
    // Configure request options
    const options: any = {
      headers: this.defaultHeaders,
      withCredentials: true // Enable cookie handling
    };
    
    // Add certificate if provided
    if (this.pfxOptions) {
      options.httpsAgent = new https.Agent({
        pfx: fs.readFileSync(this.pfxOptions.path),
        passphrase: this.pfxOptions.passphrase,
        rejectUnauthorized: false // Consider setting to true in production
      });
    }
    
    // Add proxy if provided
    if (this.proxyUrl) {
      const proxyUrl = new URL(this.proxyUrl);
      options.proxy = {
        host: proxyUrl.hostname,
        port: Number(proxyUrl.port),
        protocol: proxyUrl.protocol.replace(':', '')
      };
    }
    
    try {
      // Make a GET request to initialize session
      const response = await axios.get(this.apiBaseUrl, options);
      
      // Extract cookies from response
      const setCookieHeader = response.headers['set-cookie'];
      if (!setCookieHeader || setCookieHeader.length === 0) {
        throw new Error('No session cookie received from server');
      }
      
      // Store the cookie string
      this.sessionCookie = setCookieHeader.join('; ');
      this.logger.info('Session initialized successfully');
      
      return this.sessionCookie;
    } catch (error: any) {
      this.logger.error(`Session initialization failed: ${error.message}`);
      throw error;
    }
  }

  /**
   * Search for trades with current session
   * @param searchParams - Search parameters
   * @returns Promise<AxiosResponse> - Search results
   */
  async searchTrades(searchParams: any): Promise<AxiosResponse> {
    // Ensure we have a session
    if (!this.sessionCookie) {
      await this.initializeSession();
    }
    
    const endpoint = '/api/trades/search';
    const options: ApiRequestOptions = {
      headers: {
        'Cookie': this.sessionCookie as string
      }
    };
    
    try {
      this.logger.info(`Searching trades with params: ${JSON.stringify(searchParams)}`);
      return await this.post(endpoint, searchParams, options);
    } catch (error: any) {
      // If unauthorized, try to reinitialize session and retry
      if (error.response && (error.response.status === 401 || error.response.status === 403)) {
        this.logger.warn('Session expired, reinitializing...');
        await this.initializeSession();
        
        // Retry with new session
        options.headers = { 'Cookie': this.sessionCookie as string };
        return await this.post(endpoint, searchParams, options);
      }
      
      this.logger.error(`Trade search failed: ${error.message}`);
      throw error;
    }
  }

  /**
   * Get trade details by ID
   * @param tradeId - Trade ID
   * @returns Promise<AxiosResponse> - Trade details
   */
  async getTradeById(tradeId: string): Promise<AxiosResponse> {
    // Ensure we have a session
    if (!this.sessionCookie) {
      await this.initializeSession();
    }
    
    const endpoint = `/api/trades/${tradeId}`;
    const options: ApiRequestOptions = {
      headers: {
        'Cookie': this.sessionCookie as string
      }
    };
    
    try {
      this.logger.info(`Getting trade details for ID: ${tradeId}`);
      return await this.get(endpoint, options);
    } catch (error: any) {
      // If unauthorized, try to reinitialize session and retry
      if (error.response && (error.response.status === 401 || error.response.status === 403)) {
        this.logger.warn('Session expired, reinitializing...');
        await this.initializeSession();
        
        // Retry with new session
        options.headers = { 'Cookie': this.sessionCookie as string };
        return await this.get(endpoint, options);
      }
      
      this.logger.error(`Failed to get trade: ${error.message}`);
      throw error;
    }
  }
}
