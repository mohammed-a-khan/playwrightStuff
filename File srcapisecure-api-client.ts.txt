// In AssetApiClient - modify getAssets method

async getAssets(
  messageId: string,
  dealId: number,
  reportDate: string,
  options?: ApiRequestOptions
): Promise<AxiosResponse<AssetResponse>> {
  // Validation code as before
  
  // Create request body
  const requestBody: AssetRequest = {
    messageId,
    dealId,
    reportDate
  };
  
  // Set up request options to match Postman exactly
  const requestOptions: ApiRequestOptions = {
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'Connection': 'keep-alive', // Add these headers to match Postman
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36' // Add a standard user agent
    },
    withCredentials: true,
    pfxPath: this.pfxCertPath,
    pfxPassphrase: this.pfxCertPassphrase,
    useProxy: false, // Try disabling proxy for testing
    timeout: 60000, // Longer timeout for stability
    retryOptions: {
      maxAttempts: 3,
      retryDelay: 2000,
      retryCondition: (error) => {
        // Retry specifically on ECONNRESET
        return error.code === 'ECONNRESET' || 
               (error.response && error.response.status >= 500);
      }
    },
    ...options
  };
  
  // Log full request details
  this.logger.info(`Making asset request with ID: ${messageId}, Deal: ${dealId}`);
  this.logger.debug(`Full request body: ${JSON.stringify(requestBody)}`);
  this.logger.debug(`Using certificate: ${this.pfxCertPath}`);
  
  try {
    // Make the request
    return await this.post<AssetResponse>('/assets', requestBody, requestOptions);
  } catch (error) {
    // Enhanced error handling
    this.logger.error(`Asset request failed: ${error.message}`);
    
    // Try one more time with modified settings if it fails
    if (error.code === 'ECONNRESET') {
      this.logger.info('Retrying with modified connection settings...');
      requestOptions.useProxy = false; // Disable proxy
      return await this.post<AssetResponse>('/assets', requestBody, requestOptions);
    }
    
    throw error;
  }
}
