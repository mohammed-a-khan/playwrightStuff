package com.qaf.framework.stepdefs;

import static org.testng.Assert.*;

import java.util.Map;

import com.qaf.framework.util.ApiClientUtil;
import com.qaf.framework.util.ApiResponse;
import com.qaf.framework.util.TestContextManager;
import com.qmetry.qaf.automation.step.QAFTestStep;
import com.qmetry.qaf.automation.util.Reporter;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Steps for Asset Layout API testing with Excel data.
 */
public class AssetLayoutExcelSteps extends ApiSteps {
    
    private static final Log logger = LogFactory.getLog(AssetLayoutExcelSteps.class);
    
    /**
     * Sends a request to Asset Layout API with data from Excel.
     * 
     * @param excelData Map containing data from Excel
     * @throws Exception if an error occurs
     */
    @QAFTestStep(description = "I send a request to Asset Layout API with Excel data {excelData}")
    public void sendRequestWithExcelData(Map<String, Object> excelData) throws Exception {
        logger.info("Sending Asset Layout request with Excel data: " + excelData);
        
        try {
            // Ensure messageId is present
            if (!excelData.containsKey("messageId")) {
                excelData.put("messageId", ApiClientUtil.generateMessageId());
            }
            
            // Read the payload template
            String payloadTemplate = ApiClientUtil.readPayload("assetlayout_payload.json");
            
            // Process the template to replace placeholders with values from Excel data
            String payload = processPayloadTemplate(payloadTemplate, excelData);
            logger.debug("Processed payload: " + payload);
            
            // Send the request
            ApiResponse response = ApiClientUtil.sendPostRequest("/api/v1/spc/assetlayout", payload, new HashMap<>());
            
            // Store the response in context
            setResponse(response);
            
            Reporter.log("Asset Layout request with Excel data sent successfully");
            Reporter.log("Response status: " + response.getStatusCode());
            Reporter.log("Response body: " + response.getResponseBody());
            
        } catch (Exception e) {
            logger.error("Error sending Asset Layout request with Excel data: " + e.getMessage(), e);
            Reporter.log("Error sending request: " + e.getMessage());
            throw e;
        }
    }
    
    /**
     * Process a payload template by replacing placeholders with values.
     * 
     * @param template the payload template with placeholders
     * @param data map of values to substitute
     * @return processed payload string
     */
    private String processPayloadTemplate(String template, Map<String, Object> data) {
        String result = template;
        
        for (Map.Entry<String, Object> entry : data.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();
            String placeholder = "${" + key + "}";
            
            // Special handling for numeric values to avoid quoting them
            if (value instanceof Number) {
                // Replace with the raw value (no quotes)
                result = result.replace("\"" + placeholder + "\"", value.toString());
                // Also handle the case where there are no quotes
                result = result.replace(placeholder, value.toString());
            } else {
                // For string values, preserve the quotes if they exist
                result = result.replace(placeholder, value != null ? value.toString() : "");
            }
        }
        
        return result;
    }
    
    /**
     * Loads Excel data into the test context for later use.
     * 
     * @param excelData map containing Excel data
     */
    @QAFTestStep(description = "I load Asset Layout test data from Excel {excelData}")
    public void loadExcelData(Map<String, Object> excelData) {
        logger.info("Loading test data from Excel: " + excelData);
        
        // Clear existing test data
        TestContextManager.clearTestData();
        
        // Store Excel data in test context
        for (Map.Entry<String, Object> entry : excelData.entrySet()) {
            TestContextManager.setTestData(entry.getKey(), entry.getValue());
        }
        
        // Ensure messageId is present
        if (!TestContextManager.hasTestData("messageId")) {
            TestContextManager.setTestData("messageId", ApiClientUtil.generateMessageId());
        }
        
        Reporter.log("Loaded Asset Layout test data from Excel");
    }
    
    /**
     * Sends a request to Asset Layout API using a specific payload template with data from Excel.
     * 
     * @param templateFile the payload template filename
     * @param excelData map containing Excel data
     * @throws Exception if an error occurs
     */
    @QAFTestStep(description = "I send a request to Asset Layout API with template {templateFile} and Excel data {excelData}")
    public void sendRequestWithTemplateAndExcelData(String templateFile, Map<String, Object> excelData) throws Exception {
        logger.info("Sending Asset Layout request with template " + templateFile + " and Excel data: " + excelData);
        
        try {
            // Ensure messageId is present
            if (!excelData.containsKey("messageId")) {
                excelData.put("messageId", ApiClientUtil.generateMessageId());
            }
            
            // Read the payload template
            String payloadTemplate = ApiClientUtil.readPayload(templateFile);
            
            // Process the template to replace placeholders with values from Excel data
            String payload = processPayloadTemplate(payloadTemplate, excelData);
            logger.debug("Processed payload: " + payload);
            
            // Send the request
            ApiResponse response = ApiClientUtil.sendPostRequest("/api/v1/spc/assetlayout", payload, new HashMap<>());
            
            // Store the response in context
            setResponse(response);
            
            Reporter.log("Asset Layout request with template and Excel data sent successfully");
            Reporter.log("Response status: " + response.getStatusCode());
            Reporter.log("Response body: " + response.getResponseBody());
            
        } catch (Exception e) {
            logger.error("Error sending Asset Layout request with template and Excel data: " + e.getMessage(), e);
            Reporter.log("Error sending request: " + e.getMessage());
            throw e;
        }
    }
    
    /**
     * Show all data from Excel for debugging.
     * 
     * @param excelData map containing Excel data
     */
    @QAFTestStep(description = "I print Excel data {excelData}")
    public void printExcelData(Map<String, Object> excelData) {
        Reporter.log("=== Excel Data ===");
        for (Map.Entry<String, Object> entry : excelData.entrySet()) {
            Reporter.log("  " + entry.getKey() + " = " + entry.getValue() + 
                        " (Type: " + (entry.getValue() != null ? entry.getValue().getClass().getSimpleName() : "null") + ")");
        }
    }
}
