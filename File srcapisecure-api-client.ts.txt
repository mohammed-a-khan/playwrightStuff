When('I search for trades with following filters', async function(this: TestContext, dataTable: DataTable) {
  // Ensure trade API client exists
  if (!this.tradeApiClient) {
    throw new Error('Trade API client is not initialized');
  }

  try {
    // Use data table to create filters
    const filters: Record<string, any> = dataTable.rowsHash();
    
    // Convert comma-separated values to arrays
    if (filters.accountNumFilter) {
      filters.accountNumFilter = filters.accountNumFilter.split(',');
    }
    if (filters.tradeStatusFilter) {
      filters.tradeStatusFilter = filters.tradeStatusFilter.split(',');
    }
    if (filters.tradeTypeFilter) {
      filters.tradeTypeFilter = filters.tradeTypeFilter.split(',');
    }
    
    // Convert string to boolean for priorityOrder
    if (filters.priorityOrder) {
      filters.priorityOrder = filters.priorityOrder === 'true';
    }
    
    const requestData = filters;
    
    // Store request data for later assertions
    if (!this.testData) {
      this.testData = {};
    }
    this.testData.tradeFilters = requestData;
    
    // Execute the search
    if (this.logger) {
      this.logger.info(`Searching trades with filters: ${JSON.stringify(requestData)}`);
    }
    
    const searchResult = await this.tradeApiClient.searchTrades(requestData);
    
    // Store the response for later access
    this.response = {
      data: searchResult,
      status: 200,
      statusText: 'OK',
      headers: {},
      config: {} as any,
    };
  } catch (error) {
    if (axios.isAxiosError(error) && error.response) {
      this.response = error.response;
    } else {
      throw error;
    }
  }
});
