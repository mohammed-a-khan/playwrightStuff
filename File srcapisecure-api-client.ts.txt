// File: src/framework/base-api-client.ts
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';
import { expect } from '@playwright/test';
import { Logger } from './utils/logger';
import { ConfigManager } from './utils/config-manager';

/**
 * Interface for API request options
 */
export interface ApiRequestOptions {
  headers?: Record<string, string>;
  params?: Record<string, any>;
  data?: any;
  timeout?: number;
  validateStatus?: boolean;
}

/**
 * Base API client for all API interactions
 */
export class BaseApiClient {
  readonly apiBaseUrl: string;
  readonly defaultTimeout: number;
  readonly logger: Logger;
  readonly defaultHeaders: Record<string, string>;
  readonly config: ConfigManager;

  /**
   * Constructor for the BaseApiClient
   * @param apiBaseUrl - Base URL for API requests
   * @param defaultHeaders - Default headers to include in all requests
   */
  constructor(
    apiBaseUrl?: string,
    defaultHeaders: Record<string, string> = {}
  ) {
    this.config = ConfigManager.getInstance();
    
    // For synchronous initialization, use fallback values initially
    this.apiBaseUrl = apiBaseUrl || 'https://api.example.com';
    this.defaultTimeout = 30000;
    this.logger = new Logger(this.constructor.name);
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...defaultHeaders
    };
    
    // Initialize asynchronous values later when needed
    this.initializeConfig();
  }

  /**
   * Initialize configuration asynchronously
   * @private
   */
  private async initializeConfig(): Promise<void> {
    try {
      // Only update if apiBaseUrl wasn't explicitly provided
      if (!this.apiBaseUrl || this.apiBaseUrl === 'https://api.example.com') {
        const configBaseUrl = await this.config.getString('API_BASE_URL', 'https://api.example.com');
        (this as any).apiBaseUrl = configBaseUrl;
      }
      
      const configTimeout = await this.config.getNumber('DEFAULT_TIMEOUT', 30000);
      (this as any).defaultTimeout = configTimeout;
    } catch (error: unknown) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      this.logger.error(`Failed to initialize config: ${errorMessage}`);
    }
  }

  // Rest of the code remains the same
  // ...
