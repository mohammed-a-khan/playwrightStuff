// src/step-definitions/api-steps/asset-api-steps.ts
import { Given, When, Then } from '@cucumber/cucumber';
import { expect } from '@playwright/test';
import { AssetApiClient } from '../../api/asset-api-client';
import { TestContext } from '../../support/test-context';
import fs from 'fs';
import path from 'path';
import { AxiosResponse } from 'axios';

/**
 * Step definitions for Asset API testing using BDD style
 * Enhanced with long-running request support for stored procedure calls
 */

// Add takeErrorSnapshot to TestContext interface
declare module '../../support/test-context' {
  interface TestContext {
    takeErrorSnapshot(prefix: string, error: unknown): Promise<void>;
  }
}

// Helper method for taking error snapshots (async to ensure all file operations complete)
async function takeErrorSnapshot(this: TestContext, prefix: string, error: unknown): Promise<void> {
  try {
    const snapshotsDir = path.resolve(process.cwd(), 'reports', 'snapshots');
    if (!fs.existsSync(snapshotsDir)) {
      fs.mkdirSync(snapshotsDir, { recursive: true });
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filePath = path.join(snapshotsDir, `${prefix}-${timestamp}.json`);
    
    const errorData = {
      message: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined,
      response: this.response ? {
        status: this.response.status,
        statusText: this.response.statusText,
        data: this.response.data,
        headers: this.response.headers
      } : undefined,
      requestDuration: this.startTime ? Date.now() - this.startTime : undefined
    };
    
    // Use writeFileSync to ensure the operation completes
    await fs.promises.writeFile(filePath, JSON.stringify(errorData, null, 2));
    this.logger.info(`Error snapshot saved to: ${filePath}`);
  } catch (snapshotError) {
    this.logger.error(`Failed to take error snapshot: ${snapshotError instanceof Error ? snapshotError.message : String(snapshotError)}`);
  }
}

// Client initialization
Given('I have initialized the Khan Asset API client', async function(this: TestContext) {
  this.assetApiClient = new AssetApiClient();
  this.logger.info('Initialized Khan Asset API client');
  
  // Attach the takeErrorSnapshot method to the TestContext instance
  this.takeErrorSnapshot = takeErrorSnapshot;
});

// Template-based requests with explicit timeout control
When('I request assets using the {string} template', async function(this: TestContext, templateName: string) {
  if (!this.assetApiClient) {
    throw new Error('Asset API client is not initialized. Call "I have initialized the Khan Asset API client" first.');
  }
  
  // Ensure the helper method is attached
  if (!this.takeErrorSnapshot) {
    this.takeErrorSnapshot = takeErrorSnapshot;
  }
  
  try {
    this.startTime = Date.now(); // Track request start time
    this.logger.info(`Starting asset request with template: ${templateName}`);
    
    // Get custom timeout for this specific API
    const timeout = this.config.getNumber('ASSET_API_TIMEOUT', 300000); // 5 minutes default
    
    // Set explicit timeout for this request
    const options = {
      timeout: timeout,
      pollingOptions: {
        enabled: true,
        maxAttempts: this.config.getNumber('ASSET_API_POLLING_MAX_ATTEMPTS', 30),
        interval: this.config.getNumber('ASSET_API_POLLING_INTERVAL', 10000),
        timeoutPerAttempt: this.config.getNumber('ASSET_API_POLLING_TIMEOUT_PER_ATTEMPT', 30000)
      }
    };
    
    // Await the API call and store the response
    this.response = await this.assetApiClient.getAssetsFromTemplate(templateName, undefined, options);
    
    const duration = Date.now() - this.startTime;
    this.logger.info(`Retrieved assets using template: ${templateName} in ${duration}ms`);
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    this.logger.error(`Failed to retrieve assets: ${errorMessage}`);
    
    // Make sure to await the snapshot operation
    await this.takeErrorSnapshot('failed-asset-request', error);
    
    throw error;
  }
});

// Rest of the functions same as before...
