// src/api/asset-api-client.ts
import { BaseApiClient, ApiRequestOptions } from '../framework/base-api-client';
import { AxiosResponse } from 'axios';
import fs from 'fs';
import path from 'path';

/**
 * Asset response interface representing the API response structure
 */
export interface AssetResponse {
  assetLayouts: Array<any>;
  systemError: string | null;
  responseMessageId: string;
  validationErrorMessage: string | null;
  errorMessage: string | null;
}

/**
 * Asset request interface for type safety
 */
export interface AssetRequest {
  messageId: string;
  dealId: number;
  reportDate: string;
}

/**
 * AssetApiClient for handling asset-related API operations
 */
export class AssetApiClient extends BaseApiClient {
  private readonly requestsDir: string;

  /**
   * Constructor for AssetApiClient
   */
  constructor() {
    // Pass custom settings to BaseApiClient
    super();
    
    // Setup directory for request templates
    this.requestsDir = path.resolve(process.cwd(), 'requests');
    
    // Override certificate and proxy settings specifically for Khan API
    this.pfxCertPath = this.config.getString('KHAN_API_CERT_PATH', 
      path.resolve(process.cwd(), 'certs', 'khanapicert.pfx'));
    this.pfxCertPassphrase = this.config.getString('KHAN_API_CERT_PASSPHRASE', 'khanapipwd');
  }

  /**
   * Load request body from JSON file
   * @param filename - Name of the JSON file in requests directory
   * @returns Object from JSON file
   */
  private loadRequestFromFile<T>(filename: string): T {
    try {
      const filePath = path.join(this.requestsDir, filename);
      
      if (!fs.existsSync(filePath)) {
        throw new Error(`Request file not found: ${filePath}`);
      }
      
      const fileContent = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(fileContent) as T;
    } catch (error) {
      if (error instanceof SyntaxError) {
        this.logger.error(`Invalid JSON in request file: ${filename}`);
      }
      throw error;
    }
  }

  /**
   * Get assets for a deal
   * @param messageId - Message ID for the request
   * @param dealId - Deal ID to get assets for
   * @param reportDate - Report date in YYYY-MM-DD format
   * @param options - Request options
   * @returns Promise<AxiosResponse> - API response with assets
   */
  async getAssets(
    messageId: string,
    dealId: number,
    reportDate: string,
    options?: ApiRequestOptions
  ): Promise<AxiosResponse<AssetResponse>> {
    // Validate input
    if (!messageId) {
      throw new Error('Message ID is required');
    }
    
    if (!dealId) {
      throw new Error('Deal ID is required');
    }
    
    if (!reportDate) {
      throw new Error('Report date is required');
    }
    
    // Validate date format (YYYY-MM-DD)
    if (!/^\d{4}-\d{2}-\d{2}$/.test(reportDate)) {
      throw new Error('Report date must be in YYYY-MM-DD format');
    }
    
    // Create request body
    const requestBody: AssetRequest = {
      messageId,
      dealId,
      reportDate
    };
    
    // Set up request options with certificate and headers
    const requestOptions: ApiRequestOptions = {
      headers: {
        'Content-Type': 'application/json'
      },
      withCredentials: true,
      pfxPath: this.pfxCertPath,
      pfxPassphrase: this.pfxCertPassphrase,
      useProxy: true,
      // Default retry options
      retryOptions: {
        maxAttempts: 3,
        retryDelay: 1000
      },
      ...options // Allow overriding options
    };
    
    // Make the request
    return await this.post<AssetResponse>('/assets', requestBody, requestOptions);
  }

  /**
   * Get assets using a request template
   * @param templateName - Name of the request template file (without .json extension)
   * @param overrides - Optional overrides for the template values
   * @param options - Request options
   * @returns Promise<AxiosResponse> - API response with assets
   */
  async getAssetsFromTemplate(
    templateName: string,
    overrides?: Partial<AssetRequest>,
    options?: ApiRequestOptions
  ): Promise<AxiosResponse<AssetResponse>> {
    try {
      // Load request template
      const template = this.loadRequestFromFile<AssetRequest>(`${templateName}.json`);
      
      // Apply overrides
      const requestBody: AssetRequest = {
        ...template,
        ...overrides
      };
      
      // Call the main method with the combined data
      return await this.getAssets(
        requestBody.messageId,
        requestBody.dealId,
        requestBody.reportDate,
        options
      );
    } catch (error) {
      this.logger.error(`Error using asset request template: ${error.message}`);
      throw error;
    }
  }
}
