Project Structure:

src/main/java
├── com.mycompany.www.api.core
│   ├── BaseSecureApiClient.java
│   └── ApiResponse.java
├── com.mycompany.www.api.endpoints
│   └── AssetLayoutApi.java
├── com.mycompany.www.api.steps
│   ├── BaseApiSteps.java
│   └── AssetLayoutSteps.java
├── com.mycompany.www.api.utils
│   ├── CertificateManager.java
│   ├── JsonPayloadUtil.java
│   ├── ExcelUtil.java
│   └── ApiUtil.java

src/test/resources
├── certificates
│   └── KHANonProd.pfx
├── payloads
│   └── assetlayout_payload.json
├── environment
│   └── application.properties
│   └── testdata
│       └── Regression_testdata.xlsx
└── features
    └── assetlayout.feature

------------------------------------------
BaseSecureApiClient.java
------------------------------------------
package com.mycompany.www.api.core;

import io.restassured.RestAssured;
import io.restassured.config.SSLConfig;
import io.restassured.specification.RequestSpecification;
import com.mycompany.www.api.utils.CertificateManager;

public class BaseSecureApiClient {

    protected RequestSpecification getSecureRequest() {
        CertificateManager certManager = new CertificateManager();
        RestAssured.config = RestAssured.config()
                .sslConfig(new SSLConfig()
                        .keyStore(certManager.getKeyStore(), certManager.getPassphrase())
                        .trustStore(certManager.getKeyStore(), certManager.getPassphrase())
                        .relaxedHTTPSValidation());
        return RestAssured.given();
    }
}

------------------------------------------
CertificateManager.java
------------------------------------------
package com.mycompany.www.api.utils;

import com.qmetry.qaf.automation.core.ConfigurationManager;
import java.io.File;

public class CertificateManager {
    private final String certPath;
    private final String passphrase;

    public CertificateManager() {
        certPath = ConfigurationManager.getBundle().getString("certificate.path");
        passphrase = ConfigurationManager.getBundle().getString("certificate.passphrase");
    }

    public File getKeyStore() {
        return new File(certPath);
    }

    public String getPassphrase() {
        return passphrase;
    }
}

------------------------------------------
ApiUtil.java
------------------------------------------
package com.mycompany.www.api.utils;

import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import java.util.Map;

public class ApiUtil {

    public static Response post(RequestSpecification req, String url, String payload) {
        return req.contentType(ContentType.JSON)
                .body(payload)
                .when()
                .post(url);
    }

    public static Response get(RequestSpecification req, String url) {
        return req.when().get(url);
    }

    public static Response put(RequestSpecification req, String url, String payload) {
        return req.contentType(ContentType.JSON)
                .body(payload)
                .when()
                .put(url);
    }

    public static Response delete(RequestSpecification req, String url) {
        return req.when().delete(url);
    }
}

------------------------------------------
JsonPayloadUtil.java
------------------------------------------
package com.mycompany.www.api.utils;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;

public class JsonPayloadUtil {
    public static String getUpdatedPayload(String path, Map<String, Object> data) throws Exception {
        String payload = new String(Files.readAllBytes(Paths.get(path)));
        for (Map.Entry<String, Object> entry : data.entrySet()) {
            payload = payload.replace("${" + entry.getKey() + "}", entry.getValue().toString());
        }
        return payload;
    }
}

------------------------------------------
AssetLayoutApi.java
------------------------------------------
package com.mycompany.www.api.endpoints;

import com.mycompany.www.api.core.BaseSecureApiClient;
import com.mycompany.www.api.utils.ApiUtil;
import io.restassured.response.Response;

public class AssetLayoutApi extends BaseSecureApiClient {

    public Response postAssetLayout(String url, String payload) {
        return ApiUtil.post(getSecureRequest(), url, payload);
    }
}

------------------------------------------
BaseApiSteps.java
------------------------------------------
package com.mycompany.www.api.steps;

import com.qmetry.qaf.automation.step.QAFTestStep;
import io.restassured.response.Response;

public class BaseApiSteps {
    protected Response response;

    @QAFTestStep(description = "validate response status {statusCode}")
    public void validateResponseStatus(int statusCode) {
        assert response.getStatusCode() == statusCode;
    }
}

------------------------------------------
AssetLayoutSteps.java
------------------------------------------
package com.mycompany.www.api.steps;

import com.mycompany.www.api.endpoints.AssetLayoutApi;
import com.mycompany.www.api.utils.JsonPayloadUtil;
import com.qmetry.qaf.automation.step.QAFTestStep;
import java.util.Map;

public class AssetLayoutSteps extends BaseApiSteps {

    @QAFTestStep(description = "post asset layout with data {data}")
    public void postAssetLayout(Map<String, Object> data) throws Exception {
        String url = "https://ktgapi-sit.ksmls.americas.ishare.net/api/v1/spc/assetlayout";
        String payload = JsonPayloadUtil.getUpdatedPayload("resources/payloads/assetlayout_payload.json", data);
        AssetLayoutApi api = new AssetLayoutApi();
        response = api.postAssetLayout(url, payload);
    }
}

------------------------------------------
application.properties
------------------------------------------
certificate.path=resources/certificates/KHANonProd.pfx
certificate.passphrase=kha#123!

------------------------------------------
assetlayout_payload.json
------------------------------------------
{
  "messageId": "${messageId}",
  "dealId": ${dealId},
  "reportDate": "${reportDate}"
}

------------------------------------------
assetlayout.feature
------------------------------------------
@Regression
@enabled:true
@testCaseId:483438
@description:Test Asset Layout API
@dataProvider:dp-for-excel
@dataFile:resources/${environment.name}/testdata/Regression_testdata.xlsx
@dataProviderClass:com.abc.customdataproviderimpl.DataProvider
@sheet:testData
@key:TC_34939
Scenario: Validate asset layout API
  When post asset layout with data '${args[0]}'
  Then validate response status 200
