import * as fs from 'fs';
import * as path from 'path';
import { parse } from 'java-parser';

/**
 * Advanced Java to Playwright Converter using Abstract Syntax Tree (AST) analysis
 * This provides much deeper code understanding compared to regex-based approaches
 */

// Configuration
interface Config {
  debug: boolean;
  outputDir: string;
  createMissingDirs: boolean;
  analysisDepth: 'normal' | 'deep';
}

// Class and type tracking
interface ClassInfo {
  name: string;
  packageName: string;
  isPageObject: boolean;
  isException: boolean;
  isInterface: boolean;
  isUtility: boolean;
  isStepDefinition: boolean;
  methods: MethodInfo[];
  fields: FieldInfo[];
  extendsClass?: string;
  implementsInterfaces: string[];
  imports: string[];
  isCustomElement: boolean;
}

interface MethodInfo {
  name: string;
  returnType: string;
  parameters: ParameterInfo[];
  visibility: 'public' | 'private' | 'protected';
  isStatic: boolean;
  isStepDefinition: boolean;
  stepText?: string;
  body: string;
  annotations: AnnotationInfo[];
}

interface ParameterInfo {
  name: string;
  type: string;
}

interface FieldInfo {
  name: string;
  type: string;
  visibility: 'public' | 'private' | 'protected';
  isStatic: boolean;
  initialValue?: string;
  annotations: AnnotationInfo[];
}

interface AnnotationInfo {
  name: string;
  parameters: Map<string, string>;
}

// Project context - maintains knowledge across files
class ProjectContext {
  private classes: Map<string, ClassInfo> = new Map();
  private packages: Map<string, Set<string>> = new Map();
  private config: Config;
  private javaTypeToTsTypeMap: Map<string, string> = new Map();
  private javaExceptionToTsMap: Map<string, string> = new Map();
  private pageObjectClasses: Set<string> = new Set();
  private exceptionClasses: Set<string> = new Set();
  private utilityClasses: Set<string> = new Map();
  private stepDefinitionClasses: Set<string> = new Set();
  private elementClasses: Set<string> = new Set();

  constructor(config: Config) {
    this.config = config;
    this.initTypeMappings();
  }

  private initTypeMappings() {
    // Java primitive types to TypeScript
    this.javaTypeToTsTypeMap.set('String', 'string');
    this.javaTypeToTsTypeMap.set('Integer', 'number');
    this.javaTypeToTsTypeMap.set('int', 'number');
    this.javaTypeToTsTypeMap.set('long', 'number');
    this.javaTypeToTsTypeMap.set('Long', 'number');
    this.javaTypeToTsTypeMap.set('double', 'number');
    this.javaTypeToTsTypeMap.set('Double', 'number');
    this.javaTypeToTsTypeMap.set('float', 'number');
    this.javaTypeToTsTypeMap.set('Float', 'number');
    this.javaTypeToTsTypeMap.set('boolean', 'boolean');
    this.javaTypeToTsTypeMap.set('Boolean', 'boolean');
    this.javaTypeToTsTypeMap.set('char', 'string');
    this.javaTypeToTsTypeMap.set('Character', 'string');
    this.javaTypeToTsTypeMap.set('byte', 'number');
    this.javaTypeToTsTypeMap.set('Byte', 'number');
    this.javaTypeToTsTypeMap.set('short', 'number');
    this.javaTypeToTsTypeMap.set('Short', 'number');
    this.javaTypeToTsTypeMap.set('void', 'void');
    this.javaTypeToTsTypeMap.set('Object', 'any');

    // Java Exception classes
    this.javaExceptionToTsMap.set('Exception', 'Error');
    this.javaExceptionToTsMap.set('RuntimeException', 'Error');
    this.javaExceptionToTsMap.set('IllegalArgumentException', 'Error');
    this.javaExceptionToTsMap.set('IllegalStateException', 'Error');
    this.javaExceptionToTsMap.set('NullPointerException', 'Error');
    this.javaExceptionToTsMap.set('IOException', 'Error');
    this.javaExceptionToTsMap.set('FileNotFoundException', 'Error');
    this.javaExceptionToTsMap.set('ClassNotFoundException', 'Error');
    this.javaExceptionToTsMap.set('InterruptedException', 'Error');

    // Known element classes
    this.elementClasses.add('CSWebElement');
    this.elementClasses.add('QAFWebElement');
    this.elementClasses.add('WebElement');
    this.elementClasses.add('PageElement');
  }

  /**
   * Analyze a Java file and build class metadata
   */
  public analyzeJavaFile(filePath: string): ClassInfo | null {
    try {
      const fileContent = fs.readFileSync(filePath, 'utf8');
      
      // Use Java parser to create AST
      const ast = parse(fileContent);
      
      // Extract class info from AST
      const classInfo = this.extractClassInfoFromAST(ast, fileContent);
      
      if (classInfo) {
        // Add to project context
        this.classes.set(classInfo.name, classInfo);
        
        // Track by package
        if (!this.packages.has(classInfo.packageName)) {
          this.packages.set(classInfo.packageName, new Set());
        }
        this.packages.get(classInfo.packageName)!.add(classInfo.name);
        
        // Categorize class
        this.categorizeClass(classInfo);
        
        return classInfo;
      }
      
      return null;
    } catch (error) {
      console.error(`Error analyzing Java file ${filePath}:`, error);
      return null;
    }
  }

  /**
   * Extract class information from Java AST
   */
  private extractClassInfoFromAST(ast: any, sourceCode: string): ClassInfo | null {
    // Implementation would extract class details from AST
    // This is a complex process in a real implementation
    
    // Simplified placeholder implementation
    const classInfo: ClassInfo = {
      name: "ExtractedClass", // Would be extracted from AST
      packageName: "com.example", // Would be extracted from AST
      isPageObject: false,
      isException: false,
      isInterface: false,
      isUtility: false,
      isStepDefinition: false,
      methods: [],
      fields: [],
      implementsInterfaces: [],
      imports: [],
      isCustomElement: false
    };
    
    // In real implementation, we would:
    // 1. Extract package name
    // 2. Extract imports
    // 3. Extract class name, visibility, etc.
    // 4. Extract fields with metadata
    // 5. Extract methods with metadata
    // 6. Extract annotations
    
    return classInfo;
  }

  /**
   * Categorize a class based on its characteristics
   */
  private categorizeClass(classInfo: ClassInfo): void {
    // Check if it's a page object
    if (this.isLikelyPageObject(classInfo)) {
      classInfo.isPageObject = true;
      this.pageObjectClasses.add(classInfo.name);
    }
    
    // Check if it's an exception class
    if (this.isLikelyException(classInfo)) {
      classInfo.isException = true;
      this.exceptionClasses.add(classInfo.name);
    }
    
    // Check if it's a step definition class
    if (this.isLikelyStepDefinition(classInfo)) {
      classInfo.isStepDefinition = true;
      this.stepDefinitionClasses.add(classInfo.name);
    }
    
    // Check if it's a utility class
    if (this.isLikelyUtilityClass(classInfo)) {
      classInfo.isUtility = true;
      this.utilityClasses.add(classInfo.name);
    }
    
    // Check if it's a custom element class
    if (this.isLikelyElementClass(classInfo)) {
      classInfo.isCustomElement = true;
      this.elementClasses.add(classInfo.name);
    }
  }

  /**
   * Intelligent analysis to determine if a class is likely a page object
   */
  private isLikelyPageObject(classInfo: ClassInfo): boolean {
    // Page objects often:
    // 1. Have element fields with @FindBy annotations
    // 2. Have methods that interact with UI elements
    // 3. Often end with "Page", "PageObject", "Screen"
    // 4. Often have packages containing "page", "pages", "pageobject"
    
    // Check for common page object patterns
    const nameHints = classInfo.name.endsWith('Page') || 
                      classInfo.name.endsWith('PageObject') || 
                      classInfo.name.endsWith('Screen');
                      
    const packageHints = classInfo.packageName.includes('.page.') || 
                         classInfo.packageName.includes('.pages.') || 
                         classInfo.packageName.includes('.pageobject') || 
                         classInfo.packageName.includes('.ui.');
                         
    const hasElementFields = classInfo.fields.some(field => 
      this.elementClasses.has(field.type) || 
      field.annotations.some(a => a.name === 'FindBy')
    );
    
    // Look for UI interaction methods
    const hasElementInteractions = classInfo.methods.some(method => 
      method.body.includes('.click()') || 
      method.body.includes('.sendKeys') || 
      method.body.includes('.clear()') || 
      method.body.includes('.isDisplayed()') ||
      method.body.includes('waitFor')
    );
    
    // Combine signals
    return (nameHints || packageHints) && (hasElementFields || hasElementInteractions);
  }

  /**
   * Determine if a class is likely an exception class
   */
  private isLikelyException(classInfo: ClassInfo): boolean {
    // Exception classes typically:
    // 1. Extend Exception, RuntimeException, etc.
    // 2. End with "Exception", "Error"
    // 3. Implement special constructors
    
    const nameHints = classInfo.name.endsWith('Exception') || 
                      classInfo.name.endsWith('Error');
                      
    const extendsException = classInfo.extendsClass === 'Exception' || 
                            classInfo.extendsClass === 'RuntimeException' ||
                            this.exceptionClasses.has(classInfo.extendsClass || '');
                            
    // Check for typical exception constructors
    const hasExceptionConstructors = classInfo.methods.some(method => 
      method.name === classInfo.name && 
      (method.parameters.length === 0 || 
        (method.parameters.length === 1 && 
         (method.parameters[0].type === 'String' || 
          method.parameters[0].type === 'Throwable')))
    );
    
    return nameHints || extendsException || hasExceptionConstructors;
  }

  /**
   * Determine if a class is likely a step definition class
   */
  private isLikelyStepDefinition(classInfo: ClassInfo): boolean {
    // Step definition classes typically:
    // 1. Have methods with @QAFTestStep, @Given, @When, @Then annotations
    // 2. Often end with "Steps", "StepDef"
    // 3. Often in packages with "step", "stepdefs"
    
    const nameHints = classInfo.name.endsWith('Steps') || 
                      classInfo.name.endsWith('StepDef') || 
                      classInfo.name.endsWith('StepDefinition');
                      
    const packageHints = classInfo.packageName.includes('.step') || 
                         classInfo.packageName.includes('.stepdefs');
                         
    const hasStepMethods = classInfo.methods.some(method => 
      method.annotations.some(a => 
        a.name === 'QAFTestStep' || 
        a.name === 'Given' || 
        a.name === 'When' || 
        a.name === 'Then' || 
        a.name === 'And' || 
        a.name === 'But'
      )
    );
    
    return hasStepMethods || (nameHints && packageHints);
  }

  /**
   * Determine if a class is likely a utility class
   */
  private isLikelyUtilityClass(classInfo: ClassInfo): boolean {
    // Utility classes typically:
    // 1. Have mostly static methods
    // 2. Often end with "Util", "Utils", "Helper"
    // 3. Often in packages with "util", "helper"
    
    const nameHints = classInfo.name.endsWith('Util') || 
                      classInfo.name.endsWith('Utils') || 
                      classInfo.name.endsWith('Helper') || 
                      classInfo.name.endsWith('Helpers');
                      
    const packageHints = classInfo.packageName.includes('.util') || 
                         classInfo.packageName.includes('.helper') || 
                         classInfo.packageName.includes('.common');
                         
    const mostlyStaticMethods = classInfo.methods.filter(m => m.isStatic).length > 
                                classInfo.methods.filter(m => !m.isStatic).length;
                                
    return (nameHints || packageHints) && mostlyStaticMethods;
  }

  /**
   * Determine if a class is likely a custom element class
   */
  private isLikelyElementClass(classInfo: ClassInfo): boolean {
    // Custom element classes typically:
    // 1. Extend or implement WebElement interfaces
    // 2. Often end with "Element", "WebElement"
    // 3. Have methods like click(), sendKeys(), etc.
    
    const nameHints = classInfo.name.endsWith('Element') || 
                      classInfo.name.endsWith('WebElement');
                      
    const extendsWebElement = this.elementClasses.has(classInfo.extendsClass || '');
    
    const implementsWebElement = classInfo.implementsInterfaces.some(i => 
      i === 'WebElement' || this.elementClasses.has(i)
    );
    
    const hasElementMethods = classInfo.methods.some(method => 
      method.name === 'click' || 
      method.name === 'sendKeys' || 
      method.name === 'clear' || 
      method.name === 'isDisplayed'
    );
    
    return (nameHints || extendsWebElement || implementsWebElement) && hasElementMethods;
  }

  /**
   * Get TypeScript equivalent for a Java class name
   */
  public getTypeScriptType(javaType: string): string {
    // Handle arrays
    if (javaType.endsWith('[]')) {
      const baseType = javaType.substring(0, javaType.length - 2);
      return `${this.getTypeScriptType(baseType)}[]`;
    }
    
    // Handle generics like List<String>
    const genericMatch = javaType.match(/^(\w+)<(.+)>$/);
    if (genericMatch) {
      const containerType = genericMatch[1];
      const innerType = genericMatch[2];
      
      if (containerType === 'List' || containerType === 'ArrayList' || containerType === 'LinkedList') {
        return `${this.getTypeScriptType(innerType)}[]`;
      } else if (containerType === 'Map' || containerType === 'HashMap' || containerType === 'TreeMap') {
        const [keyType, valueType] = innerType.split(',').map(t => t.trim());
        return `Record<${this.getTypeScriptType(keyType)}, ${this.getTypeScriptType(valueType)}>`;
      } else if (containerType === 'Set' || containerType === 'HashSet' || containerType === 'TreeSet') {
        return `Set<${this.getTypeScriptType(innerType)}>`;
      } else {
        return `${containerType}<${this.getTypeScriptType(innerType)}>`;
      }
    }
    
    // Check type mapping
    if (this.javaTypeToTsTypeMap.has(javaType)) {
      return this.javaTypeToTsTypeMap.get(javaType)!;
    }
    
    // Check if it's an exception type
    if (this.exceptionClasses.has(javaType) || this.javaExceptionToTsMap.has(javaType)) {
      return this.javaExceptionToTsMap.get(javaType) || 'Error';
    }
    
    // If it's a custom element class, convert to Locator
    if (this.elementClasses.has(javaType)) {
      return 'Locator';
    }
    
    // Default to the same type name
    return javaType;
  }

  /**
   * Convert exception instantiation to TypeScript
   */
  public convertExceptionInstantiation(javaExceptionName: string, args: string[]): string {
    // In TypeScript, we always use Error or custom error classes
    const tsErrorType = this.javaExceptionToTsMap.get(javaExceptionName) || 'Error';
    
    if (args.length === 0) {
      return `new ${tsErrorType}()`;
    } else {
      // For Error, the first argument is the message
      return `new ${tsErrorType}(${args.join(', ')})`;
    }
  }

  /**
   * Get all classes in the project context
   */
  public getAllClasses(): Map<string, ClassInfo> {
    return this.classes;
  }

  /**
   * Get all page object classes
   */
  public getPageObjectClasses(): Set<string> {
    return this.pageObjectClasses;
  }

  /**
   * Get all exception classes
   */
  public getExceptionClasses(): Set<string> {
    return this.exceptionClasses;
  }

  /**
   * Get all element classes
   */
  public getElementClasses(): Set<string> {
    return this.elementClasses;
  }
}

/**
 * Orchestrate the conversion process
 */
class JavaToPlaywrightConverter {
  private config: Config;
  private projectContext: ProjectContext;
  
  constructor(config: Config) {
    this.config = config;
    this.projectContext = new ProjectContext(config);
  }

  /**
   * Process a directory or file
   */
  public processPath(inputPath: string, outputBasePath: string = ''): void {
    const stats = fs.statSync(inputPath);
    
    if (stats.isDirectory()) {
      // First pass: analyze all files to build context
      this.analyzeDirectory(inputPath);
      
      // Second pass: convert files with full context
      this.convertDirectory(inputPath, outputBasePath);
    } else if (stats.isFile() && inputPath.endsWith('.java')) {
      // For single file, we still do two passes
      this.projectContext.analyzeJavaFile(inputPath);
      this.convertFile(inputPath, outputBasePath || inputPath.replace('.java', '.ts'));
    } else {
      console.error(`Error: ${inputPath} is not a directory or a Java file`);
    }
  }

  /**
   * Analyze a directory to build project context
   */
  private analyzeDirectory(dirPath: string): void {
    const files = fs.readdirSync(dirPath);
    
    console.log(`Analyzing directory: ${dirPath}`);
    
    // Process all Java files
    for (const file of files) {
      const filePath = path.join(dirPath, file);
      const stats = fs.statSync(filePath);
      
      if (stats.isDirectory()) {
        // Recursively process subdirectories
        this.analyzeDirectory(filePath);
      } else if (file.endsWith('.java')) {
        // Analyze Java file
        this.projectContext.analyzeJavaFile(filePath);
      }
    }
  }

  /**
   * Convert a directory of Java files
   */
  private convertDirectory(dirPath: string, outputBasePath: string): void {
    const files = fs.readdirSync(dirPath);
    
    console.log(`Converting directory: ${dirPath}`);
    
    // Process all Java files
    for (const file of files) {
      const filePath = path.join(dirPath, file);
      const stats = fs.statSync(filePath);
      
      if (stats.isDirectory()) {
        // Create corresponding output directory
        const outputDir = path.join(outputBasePath, file);
        if (!fs.existsSync(outputDir) && this.config.createMissingDirs) {
          fs.mkdirSync(outputDir, { recursive: true });
        }
        
        // Recursively process subdirectories
        this.convertDirectory(filePath, outputDir);
      } else if (file.endsWith('.java')) {
        // Convert Java file
        const outputFile = path.join(outputBasePath, file.replace('.java', '.ts'));
        this.convertFile(filePath, outputFile);
      }
    }
  }

  /**
   * Convert a single Java file
   */
  private convertFile(inputFile: string, outputFile: string): void {
    try {
      console.log(`Converting file: ${inputFile} to ${outputFile}`);
      
      // Read the input file
      const fileContent = fs.readFileSync(inputFile, 'utf8');
      
      // Parse the file with Java parser
      const ast = parse(fileContent);
      
      // Convert the AST to TypeScript
      const tsContent = this.convertJavaASTToTypeScript(ast, fileContent, inputFile);
      
      // Create the output directory if it doesn't exist
      const outputDir = path.dirname(outputFile);
      if (!fs.existsSync(outputDir) && this.config.createMissingDirs) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      // Write the output file
      fs.writeFileSync(outputFile, tsContent, 'utf8');
      console.log(`Conversion complete: ${outputFile}`);
    } catch (error) {
      console.error(`Error converting file ${inputFile}:`, error);
    }
  }

  /**
   * Convert Java AST to TypeScript code
   */
  private convertJavaASTToTypeScript(ast: any, javaSource: string, filePath: string): string {
    // In a real implementation, this would be a complex process
    // that walks the AST and generates equivalent TypeScript code
    
    // For now, we'll return a placeholder
    return `// Advanced converter would process the AST and generate TypeScript code here
// This is a placeholder for the full implementation
// Original file: ${filePath}
    
import { Page, Locator, expect } from '@playwright/test';
    
// Converted TypeScript code would be generated here...
`;
  }
}

// Sample configuration
const config: Config = {
  debug: true,
  outputDir: './converted',
  createMissingDirs: true,
  analysisDepth: 'deep'
};

// Example usage
const converter = new JavaToPlaywrightConverter(config);
const inputPath = process.argv[2];
const outputPath = process.argv[3] || '';

if (!inputPath) {
  console.error('Please provide an input path (file or directory)');
  process.exit(1);
}

try {
  converter.processPath(inputPath, outputPath);
} catch (error) {
  console.error('Error executing conversion:', error);
  process.exit(1);
}
