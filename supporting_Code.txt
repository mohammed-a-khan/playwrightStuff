/**
 * Get the fully constructed base URL with returnUrl query parameter
 * @param defaultBaseUrl - Default base URL if not found in config
 * @param defaultBasePath - Default base path if not found in config
 * @param defaultRedirectPath - Default redirect URL path if not found in config
 * @returns Full URL string with returnUrl query parameter
 */
public getBaseUrl(
  defaultBaseUrl: string = 'https://example.com',
  defaultBasePath: string = '/somepath.aspx',
  defaultRedirectPath: string = ''
): string {
  const baseUrl = this.getString('BASE_URL', defaultBaseUrl);
  const basePath = this.getString('BASE_PATH', defaultBasePath);
  const redirectUrlPath = this.getString('REDIRECT_URL_PATH', defaultRedirectPath);
  
  // Ensure base path has leading slash if needed
  const formattedBasePath = basePath && !basePath.startsWith('/') ? `/${basePath}` : basePath;
  
  // Ensure redirect path has leading slash if needed for the returnUrl parameter
  const formattedRedirectPath = redirectUrlPath && !redirectUrlPath.startsWith('/') ? 
    `/${redirectUrlPath}` : redirectUrlPath;
  
  // Create base URL with the base path
  const urlWithBasePath = new URL(formattedBasePath, baseUrl);
  
  // Add the returnUrl query parameter if redirect path exists
  if (formattedRedirectPath) {
    urlWithBasePath.searchParams.set('returnUrl', formattedRedirectPath);
  }
  
  return urlWithBasePath.toString();
}

/**
 * Get default timeout from configuration
 * @param defaultValue - Default value to use if not found in config
 * @returns Timeout in milliseconds
 */
public getDefaultTimeout(defaultValue: number = 30000): number {
  return this.getNumber('DEFAULT_TIMEOUT', defaultValue);
}
