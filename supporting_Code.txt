// src/framework/base-api-client.ts
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';
import { expect } from '@playwright/test';
import { Logger } from './utils/logger';
import { ConfigManager } from './utils/config-manager';

// Rest of imports and interfaces

/**
 * Base API client for all API interactions
 */
export class BaseApiClient {
  readonly apiBaseUrl: string;
  readonly defaultTimeout: number;
  readonly logger: Logger;
  readonly defaultHeaders: Record<string, string>;
  readonly config: ConfigManager;

  /**
   * Constructor for the BaseApiClient
   * @param apiBaseUrl - Base URL for API requests
   * @param defaultHeaders - Default headers to include in all requests
   */
  constructor(
    apiBaseUrl?: string,
    defaultHeaders: Record<string, string> = {}
  ) {
    this.config = ConfigManager.getInstance();
    this.apiBaseUrl = apiBaseUrl || this.config.getApiBaseUrl();
    this.defaultTimeout = this.config.getDefaultTimeout();
    this.logger = new Logger(this.constructor.name);
    this.defaultHeaders = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...defaultHeaders
    };
  }

  // Rest of the class remains the same

  /**
   * Get authentication token
   * @returns Promise<string> - Authentication token
   */
  async getAuthToken(): Promise<string> {
    const credentials = this.config.getApiCredentials();
    
    // Implementation depends on derived classes
    throw new Error('getAuthToken() method must be implemented by derived API client classes');
  }
}
